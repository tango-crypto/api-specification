openapi: 3.0.0
info:
  title: Tangocrypto API
  x-logo:
    url: 'https://tangocrypto-img.s3.us-west-1.amazonaws.com/tangocrypto.png'
    altText: Tangocrypto logo
  version: '1'
  contact:
    name: Tangocrypto Team
    url: 'https://www.tangocrypto.com'
    email: contact@tangocrypto.com
  description: |-
    ## Overview
     Tangocrypto API(Application Programing Interface) allows you fast and reliable access to the Cardano network that requires only minutes to integrate.


     ## API Key header

     When you sign up on https://www.tangocrypto.com and create an App an `x-api-key` is created. You must include the HTTP header `x-api-key` in every request in order to authenticate the API calls.

     ## Network and Account ID

     You can choose the mainnet or the testnet for your queries. The API requires a valid `app_id` to be included with your request traffic. This identifier should be appended to the request URL.

     <table>
       <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>
       <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.tangocrypto.com/{app_id}/v1</td></tt></tr>
       <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.tangocrypto.com/{app_id}/v1</tt></td></tr>
     </table>

     ## Errors

     ### HTTP Status codes

     These are the response codes you are going to get when you query Tangocrypto API.

     <table>
       <tr><td><b>Code</b></td><td><b>Meaning</b></td></tr>
       <tr><td><tt><strong>400</strong></tt></td><td><strong>Bad Request</strong> - Your request is invalid. </td></tr>
       <tr><td><tt><strong>401</strong></tt></td><td><strong>Unauthorized</strong> - You must authenticate your request with an API key. Check out how to create a key if you do not have one. </td></tr>
       <tr><td><tt><strong>403</strong></tt></td><td><strong>Forbidden</strong> - Check you are using the right API KEY, or you've hit your capacity limit, or your request was rejected by your app's whitelist settings. </td></tr>
       <tr><td><tt><strong>404</strong></tt></td><td><strong>Not found</strong> - Endpoint not found. </td></tr>
       <tr><td><tt><strong>429</strong></tt></td><td><strong>Too Many Requests</strong> - You've exceeded your concurrent requests capacity. Check out the Rate Limits page for solutions.</td></tr>
       <tr><td><tt><strong>500</strong></tt></td><td><strong>Internal Server Error</strong> - We're unable to process your request right now. Get in touch with us if you see this.</td></tr>
     </table>
     
servers:
  - url: 'https://cardano-mainnet.tangocrypto.com'
    description: Cardano Mainnet Network
  - url: 'https://cardano-testnet.tangocrypto.com'
    description: Cardano Testnet Network
tags:
  - name: Addresses
  - name: Transactions
  - name: Wallets
  - name: Blocks
  - name: Assets
  - name: Epochs
  - name: Pools
  - name: Webhooks
  - name: NFTs > Collections
  - name: NFTs > Tokens
  - name: NFTs > Create
  - name: NFTs > Sales
paths:
  '/{app_id}/v1/addresses/{address}':
    get:
      summary: Retrieve address summary
      operationId: get-address-summary
      description: Retrieves summarized information of an address.
      tags:
        - Addresses
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: Bech32 address.
          example: addr_test1qquxc75xmzzy7sy955pyz4tqg0ycgttjcv2u39ay929q2yp59kkfl90wf7f9vlm99fek6e9l5zh65td8jhw63hn9skqq8thxnw
      responses:
        '200':
          description: Return the address content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retrieve_address_summary_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/addresses/{address}/utxos':
    get:
      tags:
        - Addresses
      summary: List address UTXOs
      description: |
        Returns a list of UTXOs for a given `address`. The response is paginated. If truncated, the response includes a `cursor` that you use in a subsequent request to retrieve the next set of UTXOs.
      operationId: list-address-utxos
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: Bech32 address.
          example: addr_test1qquxc75xmzzy7sy955pyz4tqg0ycgttjcv2u39ay929q2yp59kkfl90wf7f9vlm99fek6e9l5zh65td8jhw63hn9skqq8thxnw
        - in: query
          name: size
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: The number of results displayed on one page.
        - in: query
          name: cursor
          required: false
          schema:
            type: string
          description: |
            A `cursor` to access the next set of results. You include the cursor in subsequent requests to the endpoint as a URL query parameter of your request. If the cursor is empty in the result it means there are no more items to be retrieved.
        - in: query
          name: order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          description: |
            The ordering of items from the point of view of the blockchain. By default, we return oldest first, newest last.
      responses:
        '200':
          description: Address UTXOs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_address_utxos_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/addresses/{address}/assets':
    get:
      tags:
        - Addresses
      summary: List address assets
      description: |
        Returns a list of assets for a given `address`. The response is paginated. If truncated, the response includes a `cursor` that you use in a subsequent request to retrieve the next set of assets.
      operationId: list-address-assets
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: Bech32 address.
          example: addr_test1qquxc75xmzzy7sy955pyz4tqg0ycgttjcv2u39ay929q2yp59kkfl90wf7f9vlm99fek6e9l5zh65td8jhw63hn9skqq8thxnw
        - in: query
          name: size
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
          description: The number of results displayed on one page.
        - in: query
          name: cursor
          required: false
          schema:
            type: string
          description: |
            A `cursor` to access the next set of results. You include the cursor in subsequent requests to the endpoint as a URL query parameter of your request. If the cursor is empty in the result it means there are no more items to be retrieved.
        - in: query
          name: order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          description: |
            The ordering of items from the point of view of the blockchain. By default, we return oldest first, newest last.
      responses:
        '200':
          description: Address assets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_address_assets_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/addresses/{address}/transactions':
    get:
      tags:
        - Addresses
      summary: List address transactions
      description: |
        Returns a list of UTXOs for a given `address`. The response is paginated. If truncated, the response includes a cursor that you use in a subsequent request to retrieve the next set of transactions.
      operationId: list-address-transactions
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: Bech32 address.
          example: addr_test1qquxc75xmzzy7sy955pyz4tqg0ycgttjcv2u39ay929q2yp59kkfl90wf7f9vlm99fek6e9l5zh65td8jhw63hn9skqq8thxnw
        - in: query
          name: size
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: The number of results displayed on one page.
        - in: query
          name: cursor
          required: false
          schema:
            type: string
          description: |
            A `cursor` to access the next set of results. You include the cursor in subsequent requests to the endpoint as a URL query parameter of your request. If the cursor is empty in the result it means there are no more items to be retrieved.
        - in: query
          name: order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          description: |
            The ordering of items from the point of view of the blockchain. By default, we return oldest first, newest last.
      responses:
        '200':
          description: Return the address content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_address_transactions_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/transactions/{hash}':
    get:
      summary: Retrieve Transaction
      tags:
        - Transactions
      operationId: get-transaction
      description: Retrieves the information about a transaction requested specified by a transaction `hash`.
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: hash
          required: true
          schema:
            type: string
            format: 64-character case-sensitive hexadecimal string.
          description: Hash of the requested transaction
          example: 33e054b47f459a364da5cf02ad6d87dad69bd3bf167fd8708859552535155aa2
      responses:
        '200':
          description: Returns information about a transaction specified by a transaction hash
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retrieve_transaction_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/transactions/{hash}/utxos':
    get:
      summary: List transaction UTXOs
      tags:
        - Transactions
      operationId: list-transaction-utxos
      description: List the UTXOs from a transaction specified by a transaction `hash`.
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: hash
          required: true
          schema:
            type: string
            format: 64-character case-sensitive hexadecimal string.
          description: Hash of the requested transaction
          example: 5b730376c443e748705109cca163ed9115b0c4e6fd9459022864dfcc03dd4772
      responses:
        '200':
          description: Returns information about a transaction specified by a transaction hash
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_transaction_utxos_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/transactions/{hash}/metadata':
    get:
      tags:
        - Transactions
      summary: Retrieve transaction metadata
      description: |
        Retrieve the transaction metadata specified by a transaction `hash`. The response is paginated. If truncated, the response includes a cursor that you use in a subsequent request to retrieve the next set of metadata values.
      operationId: get-transaction-metadata
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: hash
          required: true
          schema:
            type: string
            format: 64-character case-sensitive hexadecimal string.
          description: Hash of the requested transaction
          example: 33e054b47f459a364da5cf02ad6d87dad69bd3bf167fd8708859552535155aa2
      responses:
        '200':
          description: Obtain information about stake pool retirements within a specific transaction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retrieve_transaction_metadata_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/transactions/submit':
    post:
      tags:
        - Transactions
      operationId: submit-transaction
      summary: Submit a transaction
      description: Submit an already serialized transaction to the network.
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subit_tansaction_request'
      responses:
        '200':
          description: Returns the ID of the submitted transaction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subit_tansaction_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/wallets/{stake_address}':
    get:
      summary: Retrieve wallet summary
      tags:
        - Wallets
      description: Retrieve wallet summary specified by `stake_address`.
      operationId: get-wallets-stake
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: stake_address
          required: true
          schema:
            type: string
          description: The Bech32 encoded version of the stake address.
          example: stake_test1uzxpncx82vfkl5ml00ws44hzfdh64r22kr93e79jqsumv0q8g8cy0
      responses:
        '200':
          description: Retrieve wallet summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retrieve_wallet_summary_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/wallets/{stake_address}/addresses':
    get:
      summary: List wallet addresses
      tags:
        - Wallets
      operationId: list-stake_address-addresses
      description: |
        Returns a list of addreses for a given wallet `stake_address`. The response is paginated. If truncated, the response includes a cursor that you use in a subsequent request to retrieve the next set of addresses.
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - schema:
            type: string
          name: stake_address
          in: path
          required: true
        - in: query
          name: size
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: The number of results displayed on one page.
        - in: query
          name: cursor
          required: false
          schema:
            type: string
          description: |
            A `cursor` to access the next set of results. You include the cursor in subsequent requests to the endpoint as a URL query parameter of your request. If the cursor is empty in the result it means there are no more items to be retrieved.
        - in: query
          name: order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          description: |
            The ordering of items from the point of view of the blockchain. By default, we return oldest first, newest last.
      responses:
        '200':
          description: Obtain information about the addresses of a wallet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_wallet_addresses_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/blocks/latest':
    get:
      tags:
        - Blocks
      summary: Retrieve latest block
      description: Retrieves the latest block available. This is known as the tip of the blockchain.
      operationId: get-latest-block
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
      responses:
        '200':
          description: Returns information about the latest block.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retrieve_block_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/blocks/{hash_or_block_no}':
    get:
      tags:
        - Blocks
      summary: Retrieve block
      description: Retrieves information about a block specified by `hash` or `block_no`.
      operationId: get-block
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: hash_or_block_no
          required: true
          schema:
            type: string
          description: Block hash or number.
          example: 1b1d604a7fa80f788e0ed6d39ec371d671bac417d781f1efcaa031e0e8b5f3b7 or 6925272
      responses:
        '200':
          description: A block object with the following fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retrieve_block_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/blocks/{block_number}/transactions':
    get:
      tags:
        - Blocks
      summary: List block transactions
      description: |
        Returns a list of transactions for a given block. The response is paginated. If truncated, the response includes a cursor that you use in a subsequent request to retrieve the next set of transactions.
      operationId: get-block-transactions
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: block_number
          required: true
          schema:
            type: integer
            format: integer.
          description: Block number.
          example: 3174184
        - in: query
          name: size
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
          description: The number of results displayed on one page.
        - in: query
          name: cursor
          required: false
          schema:
            type: string
          description: |
            A `cursor` to access the next set of results. You include the cursor in subsequent requests to the endpoint as a URL query parameter of your request. If the cursor is empty in the result it means there are no more items to be retrieved.
        - in: query
          name: order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          description: |
            The ordering of the transactions based on block number. By default, we return oldest first, newest last.
      responses:
        '200':
          description: A block object with the following fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_block_transactions_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/assets/{asset}':
    get:
      tags:
        - Assets
      summary: Retrieve asset
      description: Retrieves information about an asset
      operationId: get-asset
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: asset
          required: true
          schema:
            type: string
          description: Concatenation of the policy_id and hex-encoded asset_name
          example: b3fd2e8b5764818d9b33e2bc8d9e84a61fa39e75cf0c41393ee6c7a9456e6456696f6c656e6365506c61737469633437393761
      responses:
        '200':
          description: Return the information about an asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retrieve_asset_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/assets/{asset}/addreses':
    get:
      tags:
        - Assets
      summary: List asset addreses
      description: |
        Returns a list of addresses and quantities for a given asset. The response is paginated to make the result set easier to handle. If truncated, the response includes a `cursor` that you use in a subsequent request to retrieve the next batch of addresses. To learn more about how pagination works, visit https://docs.tangocrypto.com/nfts/nft-api/pagination
      operationId: list-asset-addresses
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: asset
          required: true
          schema:
            type: string
          description: Concatenation of the policy_id and hex-encoded asset_name
          example: b3fd2e8b5764818d9b33e2bc8d9e84a61fa39e75cf0c41393ee6c7a9456e6456696f6c656e6365506c61737469633437393761
      responses:
        '200':
          description: Return the information about an asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_asset_addresses_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/pools/{pool_id}':
    get:
      tags:
        - Pools
      summary: Retrieve stake pool metadata
      description: |
        Retrieve stake pool registration metadata specified by a `pool_id`.
      operationId: stake-pool-metadata
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: pool_id
          required: true
          schema:
            type: string
          description: Bech32 or hexadecimal pool ID.
          example: pool1h40kkf28nr3amhs6nsmqn75aderg6cutmygr47czu2dw2dxzvgm
      responses:
        '200':
          description: Return the pool metadata content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retrieve_pool_metadata_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/pools/{pool_id}/delegations':
    get:
      tags:
        - Pools
      summary: List stake pool delegations
      description: |
        Returns a list of delegations for a given stake pool. The response is paginated. If truncated, the response includes a cursor that you use in a subsequent request to retrieve the next set of delegations.
      operationId: stake-pool-delegations
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: pool_id
          required: true
          schema:
            type: string
          description: Bech32 or hexadecimal pool ID.
          example: pool1h40kkf28nr3amhs6nsmqn75aderg6cutmygr47czu2dw2dxzvgm
      responses:
        '200':
          description: Return the pool metadata content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_pool_delegations_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/epochs/{number}/parameters':
    get:
      tags:
        - Epochs
      summary: Retrieve protocol parameters
      operationId: retrieve-epoch-parameters
      description: Retrieves the protocol parameters for a given epoch.
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: number
          required: true
          schema:
            type: integer
          description: Number of the epoch
          example: 153
      responses:
        '200':
          description: Return the data about the epoch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retrieve_epoch_parameters_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/epochs/current':
    get:
      tags:
        - Epochs
      summary: Retrieve current epoch information
      operationId: retrieve-current-epoch
      description: Retrieves the current epoch information
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
      responses:
        '200':
          description: Retrieve current epoch information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retrieve_current_epoch_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/webhooks':
    get:
      tags:
        - Webhooks
      summary: List Webhooks
      description: |
        Returns a list of webhooks created in your Tangocrypto account. The response is paginated. If truncated, the response includes a cursor that you use in a subsequent request to retrieve the next set of webhooks.
      operationId: list-webhooks
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: query
          name: size
          schema:
            type: integer
          description: The number of webhooks to return in a single page.
          example: 3
        - in: query
          name: cursor
          required: false
          schema:
            type: string
          description: |
            A `cursor` to access the next set of results. You include the cursor in subsequent requests to the endpoint as a URL query parameter of your request. If the cursor is empty in the result it means there are no more items to be retrieved.
        - in: query
          name: order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          description: |
            The ordering of items from the point of view of the blockchain. By default, we return oldest first, newest last.
      responses:
        '200':
          description: Returns Webhooks in your Tangocrypto account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_webhooks_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
    post:
      tags:
        - Webhooks
      summary: Create Webhook
      description: Create Webhook
      operationId: create-webhook
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_webhook_request'
      responses:
        '200':
          description: Returns Webhooks in your Tangocrypto account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_webhooks_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/webhooks/{webhook_id}':
    get:
      tags:
        - Webhooks
      summary: Retrieve Webhook
      description: Get details for a single Webhook in your Tangocrypto account.
      operationId: retrieve-webhook
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: webhook_id
          required: true
          schema:
            type: string
          description: The ID of the webhook to retrieve.
          example: 638a86ce9c3d43278b0412eecad1e869
      responses:
        '200':
          description: Returns a webhook in your Tangocrypto account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retrieve_webhook_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
    patch:
      tags:
        - Webhooks
      summary: Update Webhook
      description: Updates the webbook without having to perform an upsert on the entire item. Just include include the fields you want to be updated in the request body.
      operationId: update-webhook
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: webhook_id
          required: true
          schema:
            type: string
          description: The ID of the webhook to update.
          example: 638a86ce9c3d43278b0412eecad1e869
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_webhook_request'
      responses:
        '200':
          description: Returns a webhook.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/update_webhook_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
    delete:
      tags:
        - Webhooks
      summary: Delete Webhook
      description: Deletes a single Webhook based on the provided ID.
      operationId: delete-webhook
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: webhook_id
          required: true
          schema:
            type: string
          description: Webhook ID
          example: 638a86ce9c3d43278b0412eecad1e869
      responses:
        '200':
          description: Webhook succesfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_webhook_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/nft/collections':
    get:
      tags:
        - NFTs > Collections
      summary: List NFT collections
      description: |
        Returns a list of NFT collections in your Tangocrypto account. The response is paginated. If truncated, the response includes a `cursor` that you use in a subsequent request to retrieve the next set of NFT Collections.
      operationId: list-nft-collections
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: query
          name: size
          schema:
            type: integer
          description: The number of collections to return in a single page.
          example: 3
        - in: query
          name: cursor
          schema:
            type: string
          description: A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for your original query.
          example: a97f98a8c533ee55fc2c68f7e2fecc729164c579dde81dc12925c01e800207914bad40fcd49426aaa887b2920041a41959
      responses:
        '200':
          description: Returns NFT collections in your Tangocrypto account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_collections_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
    post:
      tags:
        - NFTs > Collections
      summary: Create NFT collection
      description: Create a new NFT collection in your Tangocrypto account.
      operationId: nft-collection
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_collection_request'
      responses:
        '201':
          description: NFT collection created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_collection_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/nft/collections/{collection_id}':
    get:
      tags:
        - NFTs > Collections
      summary: Retrieve NFT collection
      description: Get details for a single NFT collection in your Tangocrypto account.
      operationId: retrieve-nft-collection
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: The ID of the NFT Collection to retrieve.
          example: 61844bfbb75c4782085f01fd
      responses:
        '200':
          description: Returns an NFT collection in your Tangocrypto account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retrieve_collection_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
    delete:
      tags:
        - NFTs > Collections
      summary: Delete NFT collection
      description: Delete an NFT Collection in your Tangocrypto account.
      operationId: delete-nft-collection
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: Collection ID.
          example: 61844bfbb75c4782085f01fd
      responses:
        '200':
          description: Collection deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection_delete_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
    patch:
      tags:
        - NFTs > Collections
      summary: Update NFT collection
      description: 'Updates the NFT collection with the fields that were supplied, leaving the others alone.'
      operationId: update-nft-collection
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: The ID of the NFT Collection to update.
          example: 61844bfbb75c4782085f01fd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_collection_request'
      responses:
        '200':
          description: Returns an NFT collection in your Tangocrypto account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_collection_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/nft/collections/{collection_id}/tokens':
    post:
      tags:
        - NFTs > Tokens
      summary: Create NFT
      description: |
        Create NFT in a Collection
      operationId: nft-create-nft
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: Collection ID.
          example: 61844bfbb75c4782085f01fd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_nft_request'
      responses:
        '201':
          description: NFT created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_nft_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
    get:
      tags:
        - NFTs > Tokens
      summary: List NFTs
      description: |
        Returns a list of NFTs for a given collection. The response is paginated to make the result set easier to handle. If truncated, the response includes a `cursor` that you use in a subsequent request to retrieve the next batch of NFTs. To learn more about how pagination works, visit https://docs.tangocrypto.com/nfts/nft-api/pagination
      operationId: get-collection-nfts
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: Collection ID
          example: 5f92c5e01c4848e4b6271a9bf48a3bd9
        - in: query
          name: size
          schema:
            type: integer
          description: The number of NFTs to return in a single page.
          example: 3
        - in: query
          name: cursor
          schema:
            type: string
          description: A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for your original query.
          example: a97f98a8c533ee55fc2c68f7e2fecc729164c579dde81dc12925c01e800207914bad40fcd49426aaa887b2920041a41959
      responses:
        '200':
          description: Collection NFTs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_nft_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/nft/collections/{collection_id}/tokens/{token_id}':
    get:
      tags:
        - NFTs > Tokens
      summary: Retrieve NFT
      description: Returns details for a single NFT.
      operationId: Retrieve-NFT
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: Collection ID
          example: 5f92c5e01c4848e4b6271a9bf48a3bd9
        - in: path
          name: token_id
          required: true
          schema:
            type: string
          description: NFT id within your Tangocrypto account.
          example: 618afe8084a47474fb1a5b81
      responses:
        '200':
          description: NFT Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retrieve_nft_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
    delete:
      tags:
        - NFTs > Tokens
      summary: Delete NFT
      description: Delete an NFT in your Tangocrypto account.
      operationId: delete-nft
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: Collection ID
          example: 5f92c5e01c4848e4b6271a9bf48a3bd9
        - in: path
          name: token_id
          required: true
          schema:
            type: string
          description: NFT id within your Tangocrypto account.
          example: 618afe8084a47474fb1a5b81
      responses:
        '200':
          description: NFT succesfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_nft_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
    patch:
      tags:
        - NFTs > Tokens
      summary: Update NFT
      description: Updates the NFT with the supplied parameters. The ones not provided  remain with the same value.
      operationId: update-NFT
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: Collection ID
          example: 5f92c5e01c4848e4b6271a9bf48a3bd9
        - in: path
          name: token_id
          required: true
          schema:
            type: string
          description: NFT id within your Tangocrypto account.
          example: 618afe8084a47474fb1a5b81
      responses:
        '200':
          description: NFT Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_nft_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/nft/collections/{collection_id}/sales/{sales_id}':
    get:
      tags:
        - NFTs > Sales
      summary: Retrieve NFT Sale
      description: 'Returns details for a single NFT sale. With this endpoint, you can check the remaining reservation time or if the sale is expired. Also, you can check if a customer has made a partial payment or if the total amount was paid. Once the payment is received, the NFT is minted and sent to the buyer''s wallet address.'
      operationId: Retrieve-NFT-sale
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: Collection ID
          example: 5f92c5e01c4848e4b6271a9bf48a3bd9
        - in: path
          name: sales_id
          required: true
          schema:
            type: string
          description: Sales ID
          example: 330d7f90d6a646e0ae9dc01c3edb791d
      responses:
        '200':
          description: NFT Sale
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retrieve_nft_sale_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/nft/collections/{collection_id}/sales':
    post:
      tags:
        - NFTs > Sales
      summary: Create NFT sale
      operationId: create-nft-sale
      description: Create an NFT sale. You can sell multiple tokens in a single sale.
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: Collection ID
          example: 61844bfbb75c4782085f01fd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_nft_sale_request'
      responses:
        '201':
          description: Returns the sale ID and the payment address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retrieve_nft_sale_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
    get:
      tags:
        - NFTs > Sales
      summary: List NFT sales
      operationId: list-nft-sales
      description: Retrieve a collection of sales.
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: Collection ID
          example: 61844bfbb75c4782085f01fd
      responses:
        '201':
          description: Returns the sale ID and the payment address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_nft_sales_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{app_id}/v1/nft/collections/{collection_id}/tokens/{token_id}/sales/{sale_id}/cancel':
    post:
      tags:
        - NFTs > Sales
      summary: Cancel NFT sale
      operationId: cancel-nft-sale
      description: Cancel a sale for a given NFT. When you cancel a sale the status of the NFT will return back to `OPEN`
      parameters:
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Tangocrypto `app_id`.
          example: f95871car1b0412bbe3750df46f9540e
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: Collection ID
          example: 61844bfbb75c4782085f01fd
        - in: path
          name: token_id
          required: true
          schema:
            type: string
          description: Token ID
          example: 61844bfbb75c4782085f01fd
        - in: path
          name: sale_id
          required: true
          schema:
            type: string
          description: Sale ID
          example: 61844bfbb75c4782085f01fd
      responses:
        '201':
          description: Returns the sale ID and the payment address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cancel_nft_sale_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
components:
  responses:
    bad_request:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 400
              error:
                type: string
                example: Bad Request
              message:
                type: string
                example: Your request is invalid. Double-check your endpoint URL and body
            required:
              - status_code
              - error
              - message
    unauthorized_error:
      description: You must authenticate your request with an API key. Check out how to create a key if you do not have one.
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 401
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: You must authenticate your request with an API key. Check out how to create a key if you do not have one.
            required:
              - status_code
              - error
              - message
    forbidden:
      description: 'You have ve hit your capacity limit, or your request was rejected by your app''s whitelist settings.'
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 403
              error:
                type: string
                example: Forbidden
              message:
                type: string
                example: You have ve hit your capacity limit.
            required:
              - status_code
              - error
              - message
    not_found:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 404
              error:
                type: string
                example: Not Found
              message:
                type: string
                example: Not Found
            required:
              - status_code
              - error
              - message
    overusage_limit:
      description: Too Many Requests
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 429
              error:
                type: string
                example: Too Many Requests
              message:
                type: string
                example: You've exceeded your concurrent requests capacity or per second capacity. Check out the Rate Limits page for solutions.
            required:
              - status_code
              - error
              - message
    internal_server_error:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 505
              error:
                type: string
                example: Internal Server Error
              message:
                type: string
                example: An unexpected response was received from the backend. Contact us at support@tangocrypto.com
            required:
              - status_code
              - error
              - message
  schemas:
    retrieve_address_summary_response:
      type: object
      properties:
        address:
          type: string
          description: Bech32 encoded addresses
          example: addr_test1qquxc75xmzzy7sy955pyz4tqg0ycgttjcv2u39ay929q2yp59kkfl90wf7f9vlm99fek6e9l5zh65td8jhw63hn9skqq8thxnw
        network:
          type: string
          enum:
            - mainnet
            - testnet
          description: The network that the address belongs to.
          example: testnet
        stake_address:
          type: string
          description: Stake address that controls the key
          example: stake_test1uq6zmtyljhhylyjk0ajj5umdvjl6pta29knethdgmejctqqr6tflc
        balance:
          type: number
          description: Amount of Ada in the address in Lovelace (1 Ada == 1000000 Lovelace)
          example: 23703680
        transactions_count:
          type: number
          description: Number of transactions containing the address
          example: 33
      example:
        network: testnet
        address: addr_test1qquxc75xmzzy7sy955pyz4tqg0ycgttjcv2u39ay929q2yp59kkfl90wf7f9vlm99fek6e9l5zh65td8jhw63hn9skqq8thxnw
        stake_address: stake_test1uq6zmtyljhhylyjk0ajj5umdvjl6pta29knethdgmejctqqr6tflc
        balance: 23703680
        transactions_count: 33
    list_address_transactions_response:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              hash:
                type: string
                description: Transaction hash.
              out_sum:
                type: string
                description: Transaction total output sum in Lovelace (1 Ada == 1000000 Lovelace).
              fee:
                type: string
                description: Transaction fee in Lovelace (1 Ada == 1000000 Lovelace).
              block:
                type: object
                properties:
                  block_no:
                    type: number
                    description: Block number where the transaction was added to the blockchain.
                  epoch_no:
                    type: number
                    description: Epoch number where the transaction was added to the blockchain.
                  epoch_slot_no:
                    description: Slot number where the transaction was added to the blockchain.
                  time:
                    type: string
                    description: Timestamp in ISO 8601 format.
              inputs:
                type: array
                description: Transaction input addresses
                items:
                  type: object
              outputs:
                type: array
                description: Transaction output addresses
                items:
                  type: object
        cursor:
          type: string
          description: |
            When the response is truncated, it includes a cursor that you can use in a subsequent request to retrieve the next set of invoices. If empty, this is the final response. For more information, see our <a href="https://docs.tangocrypto.com/rest-api/pagination">pagination guide</a>.
      example:
        data:
          - hash: da8e683e4ba186b0bd833bcdce8b6ebb0cc962833b3c7b55a7c1537d9e773ebf
            out_sum: '9677156'
            fee: '296970'
            block:
              block_no: 3288678
              epoch_no: 184
              epoch_slot_no: 359047
              time: '2022-02-03T00:04:23.000Z'
            inputs:
              - addr_test1qzej75kdsa7k70z2jr5ph4hlzd6e58ndj8d7qwssvkjx94535x6xht8nqt534r96gsc88aausnx8guq6xwxpz85vvkgsgsqqw4
              - addr_test1qzej75kdsa7k70z2jr5ph4hlzd6e58ndj8d7qwssvkjx94535x6xht8nqt534r96gsc88aausnx8guq6xwxpz85vvkgsgsqqw4
              - addr_test1wrsexavz37208qda7mwwu4k7hcpg26cz0ce86f5e9kul3hqzlh22t
            outputs:
              - addr_test1qzej75kdsa7k70z2jr5ph4hlzd6e58ndj8d7qwssvkjx94535x6xht8nqt534r96gsc88aausnx8guq6xwxpz85vvkgsgsqqw4
          - hash: b578cc5e18d990b4b28fefeb11b9a5ee21e5d86eea33bcac554fc882e737f50e
            out_sum: '8424890'
            fee: '186225'
            block:
              block_no: 3288677
              epoch_no: 184
              epoch_slot_no: 359008
              time: '2022-02-03T00:03:44.000Z'
            inputs:
              - addr_test1qzej75kdsa7k70z2jr5ph4hlzd6e58ndj8d7qwssvkjx94535x6xht8nqt534r96gsc88aausnx8guq6xwxpz85vvkgsgsqqw4
              - addr_test1qzej75kdsa7k70z2jr5ph4hlzd6e58ndj8d7qwssvkjx94535x6xht8nqt534r96gsc88aausnx8guq6xwxpz85vvkgsgsqqw4
              - addr_test1qzej75kdsa7k70z2jr5ph4hlzd6e58ndj8d7qwssvkjx94535x6xht8nqt534r96gsc88aausnx8guq6xwxpz85vvkgsgsqqw4
              - addr_test1qzej75kdsa7k70z2jr5ph4hlzd6e58ndj8d7qwssvkjx94535x6xht8nqt534r96gsc88aausnx8guq6xwxpz85vvkgsgsqqw4
              - addr_test1qzej75kdsa7k70z2jr5ph4hlzd6e58ndj8d7qwssvkjx94535x6xht8nqt534r96gsc88aausnx8guq6xwxpz85vvkgsgsqqw4
            outputs:
              - addr_test1wrsexavz37208qda7mwwu4k7hcpg26cz0ce86f5e9kul3hqzlh22t
              - addr_test1qzej75kdsa7k70z2jr5ph4hlzd6e58ndj8d7qwssvkjx94535x6xht8nqt534r96gsc88aausnx8guq6xwxpz85vvkgsgsqqw4
        cursor: df71ef56a7d667
    list_address_utxos_response:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                description: Bech32 encoded addresses
              hash:
                type: string
                description: Transaction hash of the UTXO
              index:
                type: number
                description: UTXO index in the transaction
              value:
                type: string
                description: Amount of Ada in the address (in Lovelace)
              smart_contract:
                type: boolean
                description: True if there is a smart contract
              assets:
                type: array
                items:
                  type: object
                  properties:
                    quantity:
                      type: string
                      description: Asset quantity
                    policy_id:
                      type: string
                      description: Policy ID controlling an asset
                    asset_name:
                      type: string
                      description: Asset name
                    fingerprint:
                      type: string
                      description: 'Asset fingerprint (<a href="https://cips.cardano.org/cips/cip14/">CIP14</a>)'
        cursor:
          type: string
          description: |
            When the response is truncated, it includes a cursor that you can use in a subsequent request to retrieve the next set of invoices. If empty, this is the final response. For more information, see our <a href="https://docs.tangocrypto.com/rest-api/pagination">pagination guide</a>.
      example:
        data:
          - address: addr_test1qquxc75xmzzy7sy955pyz4tqg0ycgttjcv2u39ay929q2yp59kkfl90wf7f9vlm99fek6e9l5zh65td8jhw63hn9skqq8thxnw
            hash: 0dc88eb6b35a8e93bd6490509f10684a18111de7b5f354034ea985e04199e0c7
            index: 0
            value: '1481480'
            smart_contract: false
            assets:
              - quantity: '300'
                policy_id: db86ba38e68109ae14e21a652def261b2242ab00cba0ac7a079da130
                asset_name: FaustoToken
                fingerprint: asset166fvnnetgx7dc608t6lljxvdcknsl9tw96y3lw
          - address: addr_test1qquxc75xmzzy7sy955pyz4tqg0ycgttjcv2u39ay929q2yp59kkfl90wf7f9vlm99fek6e9l5zh65td8jhw63hn9skqq8thxnw
            hash: 9a1ed8f0e53d2e0b5f6d8b43b4b50222dcc61665ac62a68352fd3b885f0a00de
            index: 0
            value: '1444443'
            smart_contract: false
            assets:
              - quantity: '1'
                policy_id: 977efb6343670a0acf730c31020f5bffa13df5df1d40c930fc9074d3
                asset_name: '54726565'
                fingerprint: asset1pl5sdztql4f6d44daf6yeq2pm28fjcdjlre0jr
        cursor: de7dee51abd6
    list_address_assets_response:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              policy_id:
                type: string
                description: Policy ID controlling an asset
              asset_name:
                type: string
                description: Asset name
              fingerprint:
                type: string
                description: 'Asset fingerprint (<a href="https://cips.cardano.org/cips/cip14/">CIP14</a>)'
              quantity:
                type: string
                description: Assset quantity
        cursor:
          type: string
          description: |
            When the response is truncated, it includes a cursor that you can use in a subsequent request to retrieve the next set of invoices. If empty, this is the final response. For more information, see our <a href="https://docs.tangocrypto.com/rest-api/pagination">pagination guide</a>.
      example:
        data:
          - policy_id: f76a081edd1195620a3b54af50bb3d6e81ad43859cd1dc31e1d4e713
            asset_name: Tango Token
            fingerprint: asset1yzgjzu2a0d0puj364p7htyht2rj0z93cs9lumd
            quantity: '1'
          - policy_id: 1ca1fc0c880d25850cb00303788dfb51bdf2f902f6dce47d1ad09d5b
            asset_name: Cuco
            fingerprint: asset1l7nkhgk2ejqxlxxl47eghg2tndser5lderj486
            quantity: '1476154456'
          - policy_id: e524317916889efe52f212e386d689df25086fb6ec0642310a755f55
            asset_name: 'DH NFT #822'
            fingerprint: asset1egkgkypd64semrpm3524h30nlxaqq0nuc6e6fe
            quantity: '1'
          - policy_id: b8e24f544db5d6eac591193df96f924e59e834b88a3ad82a18cde0c8
            asset_name: Pepe
            fingerprint: asset18qejx3cktntcvetje7glut4up3qfaczxr9qt8x
            quantity: '23716379598'
          - policy_id: 931e73ba70e7394dad92312c888e937517f5a70caaa13a02da1422e7
            asset_name: 'DIVIDE GOLDEN FOOT NFT #822'
            fingerprint: asset15czypxmhgfjenym0vr7t3mws72y2p7q7v0rswf
            quantity: '1'
          - policy_id: c868cdb63090661d815bac251aad5fcffaef94cf099e6cd81df33490
            asset_name: GOLD
            fingerprint: asset10c5p79f3hslz42u24q69hvd39e36ea5e7jdu0y
            quantity: '318912044'
        cursor: 8d37a507ead2678eda08687f4929ce3876c098c80a24c5f6a00abce4afa33068403400b7a94dab3a44432045
    retrieve_transaction_response:
      type: object
      properties:
        hash:
          type: string
          description: Transaction hash
        block_index:
          type: number
          description: Transaction index within the block
        out_sum:
          type: string
          description: The sum of all the UTXO per asset
        fee:
          type: string
          description: Transaction fee in Lovelace
        deposit:
          type: string
          description: Deposit within the transaction in Lovelace
        size:
          type: number
          description: Size of the transaction in bytes
        invalid_before:
          type: string
          nullable: true
          description: Specify a lower bound for a transaction to be valid. The transaction is valid from this slot number (including it) and thereafter.
        invalid_hereafter:
          type: string
          nullable: true
          description: Specify an upper bound for a transaction to be valid. The transaction is valid up to this slot number (not including it).
        utxo_count:
          type: string
          description: Count of UTXOs within the transaction
        withdrawal_count:
          type: string
          description: Count of the withdrawals within the transaction
        delegation_count:
          type: string
          description: Count of the delegations within the transaction
        stake_cert_count:
          type: string
          description: Count of the stake keys (de)registration and delegation certificates within the transaction
        pool_update:
          type: boolean
          description: True if the transaction was made to update a pool
        pool_retire:
          type: boolean
          description: True if the transaction was made to retire a pool
        asset_mint_or_burn_count:
          type: string
          description: Numnber of minted of burned tokens in the transaction
        block:
          type: object
          description: Block information
          properties:
            hash:
              type: string
              description: Block hash where the transaction was added to the blockchain.
            epoch_no:
              type: integer
              description: Epoch number where the transaction was added to the blockchain.
            block_no:
              type: integer
              description: Block number where the transaction was added to the blockchain.
            slot_no:
              type: integer
              description: Slot number where the transaction was added to the blockchain.
        assets:
          type: array
          items:
            type: object
            description: The sum of all the UTXO per asset
            properties:
              quantity:
                type: integer
                description: Asset quantity
              policy_id:
                type: string
                description: Policy ID of the asset
              asset_name:
                type: string
                description: Asset name
      example:
        hash: 5a1dd8ec8c8209dcf561d3bef62fc75485975a91289ab62771a8f5b41bf98d88
        block_id: '2940038'
        block_index: 0
        out_sum: '3828075'
        fee: '171925'
        deposit: '0'
        size: 372
        invalid_before: null
        invalid_hereafter: '38046494'
        valid_contract: true
        script_size: 0
        utxo_count: '4'
        withdrawal_count: '0'
        delegation_count: '0'
        stake_cert_count: '0'
        pool_update: false
        pool_retire: false
        asset_mint_or_burn_count: '0'
        block:
          hash: 0efeb64a1888fab0c2ddaa0be04fd786c87fb43e156024472bb9fd40c38a3184
          epoch_no: 158
          block_no: 2936096
          slot_no: 38039510
        assets:
          - quantity: 2
            policy_id: 9236a326ec65243627d89f60921a42314d0cd407c002280499e1f88b
            asset_name: PixelHead003
            fingerprint: asset1g5uekea2zgh2u9m5ezl3r9svf46hhca6fuds5d
    list_transaction_utxos_response:
      description: Get transaction UTXOs
      type: object
      properties:
        hash:
          type: string
          description: Transaction hash
        inputs:
          type: array
          items:
            properties:
              address:
                type: string
                description: Input address
              hash:
                type: string
                description: Transaction hash
              index:
                type: number
                description: UTXO Index
                example: 0
              value:
                type: number
                description: Ammount of Ada (in Lovelace) in the input
              assets:
                type: array
                items:
                  type: object
                  description: Assets
                  properties:
                    quantity:
                      type: integer
                      description: Asset quantity
                    policy_id:
                      type: string
                      description: Policy ID of the asset
                    asset_name:
                      type: string
                      description: Asset name
                    fingerprint:
                      type: string
                      description: 'Asset fingerprint (<a href="https://cips.cardano.org/cips/cip14/">CIP14</a>)'
        outputs:
          type: array
          items:
            properties:
              address:
                type: string
                description: Output address
              hash:
                type: string
                description: Transaction hash
              index:
                type: number
                description: UTXO Index
              value:
                type: number
                description: Ammount of Ada (in Lovelace)  in the output
              assets:
                type: array
                items:
                  type: object
                  description: Assets
                  properties:
                    quantity:
                      type: integer
                      description: Asset quantity
                    policy_id:
                      type: string
                      description: Policy ID of the asset
                    asset_name:
                      type: string
                      description: Asset name
                    fingerprint:
                      type: string
                      description: 'Asset fingerprint (<a href="https://cips.cardano.org/cips/cip14/">CIP14</a>)'
      example:
        hash: 5a1dd8ec8c8209dcf561d3bef62fc75485975a91289ab62771a8f5b41bf98d88
        inputs:
          - address: addr_test1qq5tay78z9l77vkxvrvtrv70nvjdk0fyvxmqzs57jg0vq6wk3w9pfppagj5rc4wsmlfyvc8xs7ytkumazu9xq49z94pqzl95zt
            hash: 80ac9a2b4a6b9a8404232b9b082c1810df149408a5229878001a26112f470ad0
            index: 2
            value: 2000000
            smart_contract: false
            assets:
              - quantity: 1
                policy_id: 9236a326ec65243627d89f60921a42314d0cd407c002280499e1f88b
                asset_name: PixelHead003
                fingerprint: asset1g5uekea2zgh2u9m5ezl3r9svf46hhca6fuds5d
          - address: addr_test1qq5tay78z9l77vkxvrvtrv70nvjdk0fyvxmqzs57jg0vq6wk3w9pfppagj5rc4wsmlfyvc8xs7ytkumazu9xq49z94pqzl95zt
            hash: 9696a09fea1b3e28fb2a5bcdc1267234c07ebc31cba8105e528716b5ae3add99
            index: 4
            value: 2000000
            smart_contract: false
            assets:
              - quantity: 1
                policy_id: 9236a326ec65243627d89f60921a42314d0cd407c002280499e1f88b
                asset_name: PixelHead003
                fingerprint: asset1g5uekea2zgh2u9m5ezl3r9svf46hhca6fuds5d
        outputs:
          - address: addr_test1qq5tay78z9l77vkxvrvtrv70nvjdk0fyvxmqzs57jg0vq6wk3w9pfppagj5rc4wsmlfyvc8xs7ytkumazu9xq49z94pqzl95zt
            hash: 5a1dd8ec8c8209dcf561d3bef62fc75485975a91289ab62771a8f5b41bf98d88
            index: 1
            value: 2346595
            smart_contract: false
            assets: []
          - address: addr_test1qrnume3ad8wn0mqljuacmc5vrrutxr44dkhxd26kraqe30efwdalefz33q9hfslmm4p4ahl2d5k7608cqzp4jlalnzgqgfqpdg
            hash: 5a1dd8ec8c8209dcf561d3bef62fc75485975a91289ab62771a8f5b41bf98d88
            index: 0
            value: 1481480
            smart_contract: false
            assets:
              - quantity: 2
                policy_id: 9236a326ec65243627d89f60921a42314d0cd407c002280499e1f88b
                asset_name: PixelHead003
                fingerprint: asset1g5uekea2zgh2u9m5ezl3r9svf46hhca6fuds5d
    retrieve_transaction_metadata_response:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
                description: Metadata label
                example: '721'
              json:
                type: object
                description: Content of the metadata
        cursor:
          type: string
          description: |
            When the response is truncated, it includes a cursor that you can use in a subsequent request to retrieve the next set of invoices. If empty, this is the final response. For more information, see our <a href="https://docs.tangocrypto.com/rest-api/pagination">pagination guide</a>.
      example:
        data:
          - label: '1985'
            json:
              co2:
                - value: '405'
                  source: MHZ019
              humidity:
                - value: '100.0'
                  source: SHT31
              temperature:
                - value: '13.5'
                  source: SHT31
        cursor: dd7dee57
    subit_tansaction_request:
      description: submit transaction payload
      type: object
      properties:
        tx:
          type: string
          description: Transaction in CBOR format
          example: 84a50081825820796aa5ca37d19193f837940ab8845b4808fb10aa34f40c9bc62584cd17b1622d00018282583900a7c0d35ee489f5d2aece00bb4f0a5fc34bafae511c8bddedc196658b43a216d702a4eca68a7ad2c962b5c536c52c7c3199df99f3901f56f11a000f424082583930924b85ef395bf66180429008a06e6eb9c79137307a6ebe61ac36e975924b85ef395bf66180429008a06e6eb9c79137307a6ebe61ac36e9751a00869520021a0002bf20031a1a8b37be0800a20082825820179e47dfaf2a7c3007e7a86bf4142d5131f3805af810ab255895512181672d5b58408906e29d1d944fa66e9a8ffe18662262a9bd438598a4e8d4f9cfd287a5950102f97d394549f4b5e9f0af43f4525a9720776db23dca0fc560aab257bff43104018258208dbc8952bec6217508e0170c6a361ec6ede0486b3a050dfe425850b7cd2cddcf584007e943cc883cbbeb02f4a1f780ad6b9624eef9cf5bab9336a0a8885a7fd4290a5f8c9cdff3d11cd9407f958123a9644eae25716d2d0a29ed7e86f6c031223c0c0181830302838200581c8007621a87d888fce3e84c3b6a6846758cfe8dfdb4979899434fe9058200581cdade6048bf128bb15bb9135d9f8b4fcc970945d5a3cf8cf2165e641a8200581c030cffb68bf2f15364259ea8484f7ab6a978abf60a95d601e8ff0d97f5f6
      required:
        - tx
      example:
        tx: 84a50081825820796aa5ca37d19193f837940ab8845b4808fb10aa34f40c9bc62584cd17b1622d00018282583900a7c0d35ee489f5d2aece00bb4f0a5fc34bafae511c8bddedc196658b43a216d702a4eca68a7ad2c962b5c536c52c7c3199df99f3901f56f11a000f424082583930924b85ef395bf66180429008a06e6eb9c79137307a6ebe61ac36e975924b85ef395bf66180429008a06e6eb9c79137307a6ebe61ac36e9751a00869520021a0002bf20031a1a8b37be0800a20082825820179e47dfaf2a7c3007e7a86bf4142d5131f3805af810ab255895512181672d5b58408906e29d1d944fa66e9a8ffe18662262a9bd438598a4e8d4f9cfd287a5950102f97d394549f4b5e9f0af43f4525a9720776db23dca0fc560aab257bff43104018258208dbc8952bec6217508e0170c6a361ec6ede0486b3a050dfe425850b7cd2cddcf584007e943cc883cbbeb02f4a1f780ad6b9624eef9cf5bab9336a0a8885a7fd4290a5f8c9cdff3d11cd9407f958123a9644eae25716d2d0a29ed7e86f6c031223c0c0181830302838200581c8007621a87d888fce3e84c3b6a6846758cfe8dfdb4979899434fe9058200581cdade6048bf128bb15bb9135d9f8b4fcc970945d5a3cf8cf2165e641a8200581c030cffb68bf2f15364259ea8484f7ab6a978abf60a95d601e8ff0d97f5f6
    subit_tansaction_response:
      description: Submit transaction response
      type: object
      properties:
        tx_id:
          type: string
          description: Transaction ID.
      example:
        tx_id: 50f863929e0333cddce28f20a4b104b037f0635d662de06148f605c36cbfeca6
    retrieve_wallet_summary_response:
      description: Wallet Object
      type: object
      properties:
        pool_id:
          type: string
          nullable: true
          description: Pool ID (in Bech32) where the wallet is delegated to.
        active:
          type: boolean
          description: Registration state of an wallet
        active_epoch:
          type: number
          description: Epoch of the most recent action (registration or deregistration)
        controlled_total_stake:
          type: string
          description: Balance of the wallet (in Lovelace)
        rewards_sum:
          type: string
          description: Sum of all rewards for the wallet (in Lovelace)
        withdrawals_sum:
          type: string
          description: Sum of all withdrawals for the wallet (in Lovelace)
        reserves_sum:
          type: string
          description: Sum of all funds from the reserve for the wallet (in Lovelace)
        treasury_sum:
          type: string
          description: Sum of all funds from treasury for the wallet (in Lovelace)
        withdraw_available:
          type: string
          description: Sum of available rewards that haven't been withdrawn for the wallet (in Lovelace)
      example:
        pool_id: pool1rnsw42f2q0u9fc32ttxy9l085n736jxz07lvwutz63wpyef03zh
        active: true
        active_epoch: 74
        controlled_total_stake: '888768284'
        rewards_sum: '11412755'
        withdrawals_sum: '3834203'
        reserves_sum: '0'
        treasury_sum: '0'
        withdraw_available: '7578552'
    list_wallet_addresses_response:
      type: object
      properties:
        data:
          type: array
          items:
            properties:
              address:
                type: string
                description: Address associated with the stake key
        cursor:
          type: string
          description: |
            When the response is truncated, it includes a cursor that you can use in a subsequent request to retrieve the next set of invoices. If empty, this is the final response. For more information, see our <a href="https://docs.tangocrypto.com/rest-api/pagination">pagination guide</a>.
      example:
        data:
          - address: addr_test1qrt3evwl7gpqeaxj446asnzhwkej0gk4xn95t9s0tccrv4kkk7kzvuvfll5337dx9fq8ydz9yx722zsxpvmrqharz2hsqsjf3f
          - address: addr_test1qrlzhxe9xvz0m5jlukg5xtcy43k3sx2st5q4zrp8jkdqwz7kk7kzvuvfll5337dx9fq8ydz9yx722zsxpvmrqharz2hsfs50me
          - address: addr_test1qrfukqypvy4efts3jy4x0xvcrz406g3z00f8w570kmky2vkkk7kzvuvfll5337dx9fq8ydz9yx722zsxpvmrqharz2hscvtazf
        cursor: 8d20b210c197329e9b492e34496fcd3a63cada834b7397f3e500beebffe83975056117aca818aa37134c200cf6273e930a7424dec912cbe6f52251c262e4d8ec1c214f4ca1719880bc88268cc9d643e65a1e8c8caf74ffca1d532beae9c295c69e2a43236bdeae0f0781eda0
    retrieve_block_response:
      type: object
      properties:
        hash:
          type: string
          description: The hash identifier of the block.
        epoch_no:
          type: integer
          description: The epoch number.
        slot_no:
          type: integer
          description: The slot number.
        epoch_slot_no:
          type: integer
          description: The slot number within an epoch (resets to zero at the start of each epoch).
        block_no:
          type: integer
          description: Block number.
        previous_block:
          type: integer
          description: Number of the previous block.
        next_block:
          type: integer
          description: Number of the next block.
        slot_leader:
          type: string
          description: Bech32 ID of the slot leader (ie an entity that mines a block).
        out_sum:
          type: integer
          description: Total output within the block (in Lovelace).
        fees:
          type: integer
          description: Total fees within the block (in Lovelace).
        confirmations:
          type: integer
          description: Number of block confirmations.
        size:
          type: integer
          description: The block size (in bytes).
        time:
          type: string
          description: Block creation time in ISO 8601 format
        tx_count:
          type: integer
          description: Number of transactions in the block.
        vrf_key:
          type: string
          description: The VRF key of the creator of this block.
        op_cert:
          type: string
          description: The hash of the operational certificate of the block producer.
    list_block_transactions_response:
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              hash:
                type: string
                description: The hash identifier of the transaction.
              block_index:
                type: integer
                description: The index of this transaction with the block (zero based).
              out_sum:
                type: integer
                description: The sum of the transaction outputs (in Lovelace).
              fee:
                type: integer
                description: The fees paid for this transaction (in Lovelace).
              deposit:
                type: integer
                description: 'Deposit (or deposit refund) in this transaction. Deposits are positive, refunds negative.'
              size:
                type: integer
                description: The size of the transaction in bytes.
              invalid_before:
                type: integer
                nullable: true
                description: Transaction in invalid before this slot number.
              invalid_hereafter:
                type: integer
                nullable: true
                description: Transaction in invalid at or after this slot number.
              valid_contract:
                type: boolean
                description: False if the contract is invalid. True if the contract is valid or there is no contract.
              script_size:
                type: integer
                description: The sum of the script sizes (in bytes) of scripts in the transaction.
        cursor:
          type: string
          description: |
            When the response is truncated, it includes a cursor that you can use in a subsequent request to retrieve the next set of invoices. If empty, this is the final response. For more information, see our <a href="https://docs.tangocrypto.com/rest-api/pagination">pagination guide</a>.
      type: object
      example:
        data:
          - hash: bbf01aa72dc0597c8ff426be6909f16ef7e5f85de73fc7c35421a52c8892d5bc
            block_index: 2
            out_sum: 656643343
            fee: 188249
            deposit: 0
            size: 646
            invalid_before: null
            invalid_hereafter: null
            valid_contract: true
            script_size: 0
          - hash: 7bd92f46962277450b400a8251c74d9129b4d5094b604c8a64a3488b555d3748
            block_index: 1
            out_sum: 647626065
            fee: 192297
            deposit: 0
            size: 738
            invalid_before: 45812575
            invalid_hereafter: 45816174
            valid_contract: true
            script_size: 13308
        cursor: de72e152aed36f
    retrieve_asset_response:
      type: object
      properties:
        policy_id:
          type: string
          description: Policy ID of the asset
        asset_name:
          type: string
          description: Asset name (Hex encoded)
        fingerprint:
          type: string
          description: 'Asset fingerprint (<a href="https://cips.cardano.org/cips/cip14/">CIP14</a>)'
        quantity:
          type: integer
          description: Asset quantity
        mint_or_burn_count:
          type: integer
          description: Count of mint and burn transactions
        initial_mint_tx_hash:
          type: string
          description: ID of the initial minting transaction
        metadata:
          type: object
          nullable: true
          description: |
            The metadata varies depending on the token type. Usually NFTs use the label 721 and FTs don't standard for the label. 
      example:
        policy_id: b3fd2e8b5764818d9b33e2bc8d9e84a61fa39e75cf0c41393ee6c7a9
        asset_name: 456e6456696f6c656e6365506c61737469633437393761
        fingerprint: asset1uq7kmkq4re85zgxtuzweayl23lgs7tjytw24u2
        quantity: 11
        mint_or_burn_count: 11
        initial_mint_tx_hash: ec2412eacb06dc6d745c545a6bf0c5a594ea8a33d10b1b51b0789b0ccda1b581
        metadata:
          label: 721
          json:
            b3fd2e8b5764818d9b33e2bc8d9e84a61fa39e75cf0c41393ee6c7a9:
              EndViolencePlastic4797a:
                name: End Violence Plastic 4797
                image: 'ipfs://QmehpwNu2uvmMX3iuePpL4mq37vvZdQzGaGHdtFKYn3S9Q'
                Series: End Violence 003
                Artists: Charles Gitnick x GlitchCreation
                Copyright: © Charles Gitnick 2021. All Rights Reserved
                Collection: End Violence
    list_asset_addresses_response:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                description: Bech32 encoded addresses
              quantity:
                type: string
                description: Assset quantity
        cursor:
          type: string
          description: |
            When the response is truncated, it includes a cursor that you can use in a subsequent request to retrieve the next set of invoices. If empty, this is the final response. For more information, see our <a href="https://docs.tangocrypto.com/rest-api/pagination">pagination guide</a>.
      example:
        data:
          - address: addr1wyzynye0nksztrfzpsulsq7whr3vgh7uvp0gm4p0x42ckkqqq6kxq
            quantity: '177777776'
          - address: addr1vy0qvhvsvhxc6ejw5vhd97x7kkw7klw6m4zfttypyfyk9ncjc9lk6
            quantity: '2000000000000'
          - address: addr1v8m0dvk84c7hg6rzul6h9f4998vtaqqrupw778vrw3e4ezqck7n2g
            quantity: '1000000000000'
          - address: addr1qyzu340ufsur44v4hqnkqahzsrtgwx0c6npwx00n3j9cu4a9gzvzr55l0mcjlfgka4rkpznq3xhaa6lp6cu2n6exmrjsjf5knk
            quantity: '2753809'
          - address: addr1qyzmt9rxvwar7xeuy8nlpysun8v68qytu5cma0gp9qrl9gcxg4aqcdrya4k94zdf6t2zhadjz5darupwdu2whkfhh8rq74ejqn
            quantity: '15000000'
          - address: addr1qyu3y268mr6thza7gsdw37slgnyef2rvewt00prmgexh23aphkq4qp8j09ffhwfd96239qez8apywvt9u7nwur5gm8lqrpnm9d
            quantity: '23423423'
        cursor: 8d20b210af922e879f0f33284b68cd7972c89bc9486799e1a205e2abaaf63f351f7200e6e55cf765125c275afe75399f0e7378c09b1a9fe8f52c0d867faec2f804744e4df235c1c2ae9e6682de8649b6154498c6e072f4d30d5e30a4e1ddd69c8c3f5e267ac8a0
    retrieve_pool_metadata_response:
      type: object
      properties:
        id:
          type: string
          description: Pool id
        pool_id:
          type: string
          description: The Bech32 encoding of the pool hash.
          nullable: true
        pledge:
          type: integer
          description: The amount (in Lovelace) the pool owner pledges to the pool.
        margin:
          type: number
          description: The margin (as a percentage) this pool charges.
        fixed_cost:
          type: integer
          description: The fixed per epoch fee (in ADA) this pool charges.
        active_epoch_no:
          type: integer
          description: The epoch number where this update becomes active.
        url:
          type: string
          nullable: true
          description: URL to the stake pool metadata
        hash:
          type: string
          nullable: true
          description: The expected hash for the off-chain data.
        ticker:
          type: string
          nullable: true
          description: The pool's ticker name (as many as 5 characters).
        name:
          type: string
          description: Pool name
          nullable: true
        description:
          type: string
          description: Pool description
          nullable: true
        homepage:
          type: string
          description: Pool URL. This is usually a landing page to explain the pool mission and unique value proposition.
          nullable: true
      example:
        id: bd5f6b254798e3ddde1a9c3609fa9d6e468d638bd9103afb02e29ae5
        pool_id: pool1h40kkf28nr3amhs6nsmqn75aderg6cutmygr47czu2dw2dxzvgm
        pledge: 30000000000
        margin: 0.02
        fixed_cost: 340000000
        active_epoch_no: 308
        url: 'https://www.tangocrypto.com/tangopool.json'
        hash: 9b7255eaf6407c388eee47e2902ead357ee3bd13b846bb6f61dbc8a12da8e0c8
        ticker: TANGO
        name: Tango Pool
        description: LEAD your Computer Science and Fintech Specialist - LEADing the way to a decentralisied future.
        homepage: 'https://www.tangocrypto.com'
    list_pool_delegations_response:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              stake_address:
                type: string
                description: Bech32 encoded stake addresses.
              available_rewards:
                type: string
                description: Rewards earned by staking.
              stake:
                type: string
                description: Delegated amount (in Lovelace).
        cursor:
          type: string
          description: |
            When the response is truncated, it includes a cursor that you can use in a subsequent request to retrieve the next set of invoices. If empty, this is the final response. For more information, see our <a href="https://docs.tangocrypto.com/rest-api/pagination">pagination guide</a>.
      example:
        data:
          - stake_address: stake_test1urya8jsmsxavfxr0855c8dzenrf39q02z5z709gcr4rnu0gaf4eue
            available_rewards: '23609294'
            stake: '16221990296'
          - stake_address: stake_test1uzfatty4lj5m7kjjgdzlfd9fv8xf5u8q4xjfkda45zgqacgdy2m5l
            available_rewards: '12404464989'
            stake: '25113820698144'
          - stake_address: stake_test1uz7wapqxnrkkhm4h4pmqd6grg0pjrksvzfqkxah37jdq5cszy2m6j
            available_rewards: '283887879884'
            stake: '61164764571408'
        cursor: db74e552af
    retrieve_epoch_parameters_response:
      type: object
      properties:
        epoch_no:
          type: integer
          description: Epoch number
        min_fee_a:
          type: integer
          description: The 'a' parameter to calculate the minimum transaction fee.
        min_fee_b:
          type: integer
          description: The 'b' parameter to calculate the minimum transaction fee.
        max_block_size:
          type: integer
          description: The maximum block size (in bytes).
        max_tx_size:
          type: integer
          description: The maximum transaction size (in bytes).
        max_block_header_size:
          type: integer
          description: The maximum block header size (in bytes).
        key_deposit:
          type: integer
          description: The amount (in Lovelace) require for a deposit to register a StakeAddress.
        pool_deposit:
          type: integer
          description: The amount (in Lovelace) require for a deposit to register a stake pool.
        max_epoch:
          type: integer
          example: 18
          description: The maximum number of epochs in the future that a pool retirement is allowed to be scheduled for.
        optimal_pool_count:
          type: integer
          description: The optimal number of stake pools (K).
        influence_a0:
          type: number
          description: The influence of the pledge on a stake pool's probability on minting a block.
        monetary_expand_rate_rho:
          type: number
          description: The monetary expansion rate.
        treasury_growth_rate_tau:
          type: number
          description: The treasury growth rate.
        decentralisation:
          type: number
          description: 'The decentralisation parameter (1 fully centralised, 0 fully decentralised).'
        entropy:
          type: object
          nullable: true
          description: The 32 byte string of extra random-ness to be added into the protocol's entropy pool.
        protocol_major:
          type: integer
          description: The protocol major number.
        protocol_minor:
          type: integer
          description: The protocol minor number.
        min_utxo:
          type: integer
          description: The minimum value of a UTxO entry (in Lovelace).
        min_pool_cost:
          type: integer
          description: The minimum pool cost.
        nonce:
          type: string
          description: The nonce value for this epoch.
      example:
        epoch_no: 153
        min_fee_a: 44
        min_fee_b: 155381
        max_block_size: 65536
        max_tx_size: 16384
        max_block_header_size: 1100
        key_deposit: 2000000
        pool_deposit: 500000000
        max_epoch: 18
        optimal_pool_count: 500
        influence_a0: 0.3
        monetary_expand_rate_rho: 0.003
        treasury_growth_rate_tau: 0.2
        decentralisation: 0
        entropy: null
        protocol_major: 4
        protocol_minor: 0
        min_utxo: 1000000
        min_pool_cost: 340000000
        nonce: 194f83d13141e9e051364d9ed2d8c99271e6de83190812a9b2d09ad840838b0f
    retrieve_current_epoch_response:
      description: ''
      type: object
      properties:
        out_sum:
          type: string
          description: The sum of the transaction output values (in Lovelace) in this epoch.
        fees:
          type: string
          description: The sum of the fees (in Lovelace) in this epoch.
        tx_count:
          type: number
          description: The number of transactions in this epoch.
        blk_count:
          type: number
          description: The number of blocks in this epoch.
        no:
          type: number
          description: The epoch number.
        start_time:
          type: string
          description: The epoch start time.
        end_time:
          type: string
          description: The epoch end time.
      example:
        out_sum: '83119736306523747'
        fees: '83701820554'
        tx_count: 208824
        blk_count: 8318
        no: 326
        start_time: '2022-03-11T21:48:10.000Z'
        end_time: '2022-03-13T22:16:41.000Z'
    retrieve_webhook_response:
      type: object
      properties:
        name:
          type: string
          description: Webhook name
        network:
          type: string
        description:
          type: string
          description: Webhook description
        address:
          description: Destination address.
        callback_url:
          type: string
          description: The URL where your server is listening. We send a POST to this URL with the webhook event.
        rules:
          type: array
          description: |
            Every rule is composed of a field, a value and an operator. 
          items:
            type: object
            properties:
              field:
                type: string
                description: 'Depends on the type of webhook it can be `policy_id`, `asset_name`, `fingerprint`, `ammount`, etc. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
              operator:
                type: string
                description: 'Depending on the field it can be `=`, `>`, `<`, `>=`, `<=`''. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
              value:
                type: string
                description: 'Depends on the selected field. It can be a numeric value if the field is `amount` or a `policy_id` if the asset is a token. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
        create_date:
          type: string
          description: Creation datetime in ISO 8601 format.
        update_date:
          type: string
          description: Update datetime in ISO 8601 format.
        available:
          type: boolean
          description: True if the webhook is available. False if the webhook is disabled.
        id:
          type: string
          description: Webhook ID
        type:
          type: string
          description: Webhook type
      example:
        name: My Webhook
        network: testnet
        description: testing block webhooks
        callback_url: 'https:///bc5d-2800-a4-169a-8600-dd8c-785f-9362-d579.ngrok.io/callback'
        rules:
          - field: tx_count
            operator: '='
            value: '10'
        create_date: '1642411240064'
        update_date: '1642411240064'
        available: true
        id: 2a41341fb0d64f818efc1ab722566521
        type: block
    create_webhook_request:
      type: object
      properties:
        name:
          type: string
          description: Webhook name
        network:
          description: Blockchain network
          enum:
            - mainnet
            - testnet
        description:
          type: string
          description: Webhook description
        type:
          type: string
          description: Webhook type
          enum:
            - payment
            - transaction
            - block
            - delegation
            - nft
            - epoch
        address:
          description: Destination address. This field is used only in the payment webhook and it's mandatory in payment webhooks.
        callback_url:
          type: string
          description: The URL where your server is listening. We send a POST to this URL with the webhook event.
        rules:
          type: array
          description: 'Every rule is composed of a field, a value and an operator. All the conditions have to be met for the webhook to be triggered. Rules are optional; depending on the number of rules and their parameters, the webhook will be triggered or not.'
          items:
            type: object
            properties:
              field:
                type: string
                description: 'Depends on the type of webhook it can be `policy_id`, `asset_name`, `fingerprint`, `ammount`, etc. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
              operator:
                type: string
                description: 'Depending on the field it can be `=`, `>`, `<`, `>=`, `<=`''. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
              value:
                type: string
                description: 'The `value` value depends on the type of webhook. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
      required:
        - name
        - network
        - type
        - callback_url
      example:
        name: My Webhook
        description: Payment webhook
        type: payment
        address: addr_test1xzfyhp0089dlvcvqg2gq3grwd6uu0yfhxpaxa0np4smwjavjfwz77w2m7escqs5spzsxum4ec7gnwvr6d6lxrtpka96ssvtdj5
        callback_url: 'https:///bc5d-2800-a4-169a-8600-dd8c-785f-9362-d579.ngrok.io/callback'
        rules:
          - field: policy_id
            operator: '='
            value: 57fca08abbaddee36da742a839f7d83a7e1d2419f1507fcbf3916522
    create_webhooks_response:
      type: object
      properties:
        id:
          type: string
          description: Webhook ID
        type:
          type: string
          description: Webhook type
        name:
          type: string
          description: Webhook name
        network:
          type: string
        description:
          type: string
          description: Webhook description
        address:
          description: Destination address.
        callback_url:
          type: string
          description: The URL where your server is listening. We send a POST to this URL with the webhook event.
        rules:
          type: array
          description: |
            Every rule is composed of a field, a value and an operator. 
          items:
            type: object
            properties:
              field:
                type: string
                description: 'Depends on the type of webhook it can be `policy_id`, `asset_name`, `fingerprint`, `ammount`, etc. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
              operator:
                type: string
                description: 'Depending on the field it can be `=`, `>`, `<`, `>=`, `<=`''. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
              value:
                type: string
                description: 'Depends on the selected field. It can be a numeric value if the field is `amount` or a `policy_id` if the asset is a token. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
        create_date:
          type: string
          description: Creation datetime in ISO 8601 format.
        update_date:
          type: string
          description: Update datetime in ISO 8601 format.
        available:
          type: boolean
          description: True if the webhook is available. False if the webhook is disabled.
      example:
        name: My Webhook
        network: testnet
        description: testing block webhooks
        callback_url: 'https:///bc5d-2800-a4-169a-8600-dd8c-785f-9362-d579.ngrok.io/callback'
        rules:
          - field: tx_count
            operator: '='
            value: '10'
        create_date: '1642411240064'
        update_date: '1642411240064'
        available: true
        id: 2a41341fb0d64f818efc1ab722566521
        type: block
    update_webhook_request:
      type: object
      properties:
        name:
          type: string
          description: Webhook name
        description:
          type: string
          description: Webhook description
        type:
          type: string
          description: Webhook type
          enum:
            - payment
            - transaction
            - block
            - delegation
            - nft
            - epoch
        address:
          description: Destination address. This field is used only in the payment webhook and it's mandatory in payment webhooks.
        callback_url:
          type: string
          description: The URL where your server is listening. We send a POST to this URL with the webhook event.
        rules:
          type: array
          description: 'Every rule is composed of a field, a value and an operator. All the conditions have to be met for the webhook to be triggered. Rules are optional; depending on the number of rules and their parameters, the webhook will be triggered or not.'
          items:
            type: object
            properties:
              field:
                type: string
                description: 'Depends on the type of webhook it can be `policy_id`, `asset_name`, `fingerprint`, `ammount`, etc. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
              operator:
                type: string
                description: 'Depending on the field it can be `=`, `>`, `<`, `>=`, `<=`''. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
              value:
                type: string
                description: 'The `value` value depends on the type of webhook. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
      required:
        - name
        - type
        - callback_url
      example:
        name: My Webhook
        description: Payment webhook
        type: payment
        address: addr_test1xzfyhp0089dlvcvqg2gq3grwd6uu0yfhxpaxa0np4smwjavjfwz77w2m7escqs5spzsxum4ec7gnwvr6d6lxrtpka96ssvtdj5
        callback_url: 'https:///bc5d-2800-a4-169a-8600-dd8c-785f-9362-d579.ngrok.io/callback'
        rules:
          - field: policy_id
            operator: '='
            value: 57fca08abbaddee36da742a839f7d83a7e1d2419f1507fcbf3916522
    update_webhook_response:
      type: object
      properties:
        name:
          type: string
          description: Webhook name
        network:
          type: string
        description:
          type: string
          description: Webhook description
        address:
          description: Destination address.
        callback_url:
          type: string
          description: The URL where your server is listening. We send a POST to this URL with the webhook event.
        rules:
          type: array
          description: |
            Every rule is composed of a field, a value and an operator. 
          items:
            type: object
            properties:
              field:
                type: string
                description: 'Depends on the type of webhook it can be `policy_id`, `asset_name`, `fingerprint`, `ammount`, etc. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
              operator:
                type: string
                description: 'Depending on the field it can be `=`, `>`, `<`, `>=`, `<=`''. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
              value:
                type: string
                description: 'Depends on the selected field. It can be a numeric value if the field is `amount` or a `policy_id` if the asset is a token. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
        create_date:
          type: string
          description: Creation datetime in ISO 8601 format.
        update_date:
          type: string
          description: Update datetime in ISO 8601 format.
        available:
          type: boolean
          description: True if the webhook is available. False if the webhook is disabled.
        id:
          type: string
          description: Webhook ID
        type:
          type: string
          description: Webhook type
      example:
        name: My Webhook
        network: testnet
        description: testing block webhooks
        callback_url: 'https:///bc5d-2800-a4-169a-8600-dd8c-785f-9362-d579.ngrok.io/callback'
        rules:
          - field: tx_count
            operator: '='
            value: '10'
        create_date: '1642411240064'
        update_date: '1642411240064'
        available: true
        id: 2a41341fb0d64f818efc1ab722566521
        type: block
    delete_webhook_response:
      type: object
      properties:
        deleted:
          type: boolean
          description: True if was succesfully deleted. False if there was an error.
        deleted_webhook_id:
          type: string
          description: The ID of the deleted webhook
        deleted_at:
          type: string
          description: The database timestamp of this deletion in ISO 8601 format.
      example:
        deleted: true
        deleted_webhook_id: 2a41341fb0d64f818efc1ab722566521
        deleted_at: '2022-01-22T18:21:25.091Z'
    list_webhooks_response:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: Webhook name.
              network:
                type: string
                description: Webhook network.
                enum:
                  - mainnet
                  - testnet
              description:
                type: string
                description: Webhook description.
              callback_url:
                type: string
                description: The url where your server is listening.
              rules:
                type: array
                description: |
                  Every rule is composed of a field, a value and an operator. All the conditions have to be met for the webhook to be triggered. Rules are optional; depending on the number of rules and their parameters, the webhook will be triggered or not.
                nullable: true
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      description: 'The `field` value depends on the type of webhook. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
                    operator:
                      type: string
                      description: 'The `operator` value depends on the type of webhook. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
                    value:
                      type: string
                      description: 'The `value` value depends on the type of webhook. For a full reference vist <a href="https://docs.tangocrypto.com/notify/notify/trigger-rules">Trigger Rules</a>.'
              create_date:
                type: string
                description: Webhook creation date in ISO 8601 format.
              update_date:
                type: string
                description: Webhook update date in ISO 8601 format.
              available:
                type: boolean
                description: Webhook status.
              confirmations:
                type: integer
                description: Number of confirmations of the transaction
              id:
                type: string
                description: Webhook id.
              type:
                type: string
                description: Wehhook type.
                enum:
                  - payment
                  - block
                  - transaction
                  - delegation
                  - nft
              address:
                type: string
                description: Payment address.
        cursor:
          type: string
          description: |
            When the response is truncated, it includes a cursor that you can use in a subsequent request to retrieve the next set of invoices. If empty, this is the final response. For more information, see our <a href="https://docs.tangocrypto.com/rest-api/pagination">pagination guide</a>.
      example:
        data:
          - name: webhook-ticker
            network: testnet
            description: testing no direct auth_token webhooks
            callback_url: 'https:///bc5d-2800-a4-169a-8600-dd8c-785f-9362-d579.ngrok.io/callback'
            rules:
              - field: pool.ticker
                operator: '='
                value: TANGO
            create_date: '2022-01-19T23:09:12.940Z'
            update_date: '2022-01-19T23:09:12.940Z'
            available: true
            id: aa9214be1ef244ebae10bcc5dad4a0a6
            type: delegation
          - name: Payment
            network: testnet
            description: Notify on any
            callback_url: 'https://webhook.site/b2574d86-e518-4fad-9555-51f75584b870'
            rules: []
            create_date: '2022-01-22T18:21:25.091Z'
            update_date: '2022-02-03T02:03:52.841Z'
            available: true
            confirmations: 2
            id: f9cca0f8494c4a81b185b90c8869f522
            type: payment
            address: addr_test1qpxf854lx7yfhc3th9mn8hqnfcl73fkna764gdcjqlxvz32r5gtdwq4yajng57kje93tt3fkc5k8cvvem7vl8yql2mcs0t9p3h
        cursor: null
    policy_script:
      description: 'Policy script. This script indicates the type of signing that is required to issue tokens, the hash of the public verification key and a time locking.'
      type: object
      properties:
        type:
          type: string
          description: It specifies the type `all` and a list of scripts as the sub-expressions.
        scripts:
          type: array
          allOf:
            - type: object
              properties:
                type:
                  type: string
                  description: Type of signing that is required to issue tokens. For the time being we only support `sig`.
                keyHash:
                  type: string
                  description: Hash of the public verification key.
            - type: object
              properties:
                type:
                  type: string
                  description: It specifies the type `before`
                slot:
                  type: string
                  description: The signature is going to be valid before this `slot`.
    nft_collection:
      description: NFT Collection
      type: object
      properties:
        id:
          type: string
          description: Colletion ID
        name:
          type: string
          description: Collection name
        url:
          type: string
          description: URL of the website where the collection is going to be sold.
        description:
          type: string
          description: Collection description placeholder. It's available to be minted in the metadata via the<description> placeholder.
        payout_address:
          type: string
          description: Wallet address that is going to receive the payments of the NFT sale.
        policy:
          type: object
          properties:
            lock:
              type: boolean
              description: 'Defines if the policy will be locked or not. You are not required to chose a date and time to lock the policy, if you set this parameter to false it means that the policy will be open and you can be minting NFTs under this policy forever. If you set this parameter to true then you have to specify a locktime date.'
            lock_time:
              type: string
              description: |
                Locktime date in ISO 8601 format `yyyy-mm-ddThh:mm:ss[.mmm]`. It defines how long you'll be able to mint NFTs for the collection. The policy will lock after that date, and you won't be able to mint more NFTs using the same policy id (even if you use the same key). Hours and minutes are optional; if you set it to `2022-02-24`, it will automatically fill it with 0s, for example, `2022-02-24T00:00:00.000Z`. Take into consideration the desirability and size of your collection before setting this date and leave enough time for selling the NFTs. There is no limited time for the future.
            policy_id:
              type: string
              description: 'Policy ID of the collection. You should post the policy ID in you website, social media or any communication channel you use for buyers to verify the authenticity of the tokens they buy.'
            script:
              $ref: '#/components/schemas/policy_script'
        metadata:
          $ref: '#/components/schemas/nft_collection_metadata'
        created_at:
          type: string
          description: Creation datetime in ISO 8601 format.
        updated_at:
          type: string
          description: Update datetime in ISO 8601 format.
      example:
        id: 3a78f8c00d8542278f70e554cf303447
        name: Complete Collection
        url: 'https://www.tangocrypto.com'
        description: Complete collection description
        payout_address: addr_test1qz5xdujk7unjmyrvqazy7l4w9dzxxfgt48ppv9tsjwywrzckyjqzaxt9rkqxc62m7tcdfylykzzjktqzlwssxfl3mlyqafvh99
        policy:
          lock: true
          lock_time: '2027-01-24T04:18:59.758Z'
          policy_id: 15b3a03bab3ea4fb2aeee83a973e7fea63746bdc03ca4dc2941469f3
          script:
            type: all
            scripts:
              - type: sig
                keyHash: f91dce420304c2ce0c62ac77c78f9cc94d5266ad88bdf4f868a17dab
              - type: before
                slot: '209198046'
        metadata:
          label: '721'
          asset_name: <asset_name>
          name: <name>
          image: <image_link>
          media_type: <mime_type>
          description: <description>
          attributes:
            face: <face>
            twitter: 'https://twitter.com/tango_crypto'
            copyright: Tangocrypto 2021
            color: <color>
            artist: Tangocrypto
            collection: Tangocrypto Collection
            body: <body>
            eyes: <eyes>
            accessory: <accessory>
          version: '1.0'
        created_at: '2022-02-23T08:15:01.576Z'
        updated_at: '2022-02-23T08:15:01.576Z'
    nft_collection_metadata:
      type: object
      description: |
        Metadata placeholders for the collection. The values between `< >` mean that they are placeholders. A placeholder is simply a variable that we will assign its value when you mint the NFT. You can use the metadata placeholder to define common attributes shared by all the NFTs in the collection, like the name, copyright, date issued, artist name, social media links, etc. Using metadata placeholders is not mandatory because you can define all the attributes while creating the individual NFTs.
      properties:
        label:
          type: string
          description: Metadata label. In Cardano NFTs are identified by the `721` label.
        asset_name:
          type: string
          description: Metadata placeholder for the NFT name.
        name:
          type: string
          description: Metadata placeholder for the NFT asset name.
        image:
          type: string
          description: Metadata placeholder for the NFT image link.
        media_type:
          type: string
          description: 'Metadata placeholder for the media type (also known as a Multipurpose Internet Mail Extensions or MIME type) indicates the nature and format of a document, file, or assortment of bytes. It is common to have NFTs with MIME-type imag, audioand video.'
        description:
          type: string
          description: Metadata placeholder for the NFT image link.
        files:
          type: array
          description: 'Array of files used for files. This is used when you want to create an NFT with different file formats. For example, you can create several audio files and add them to the metadata.'
          items:
            type: object
            properties:
              name:
                type: string
                description: Asset name of the file
              media_type:
                type: string
              src:
                type: string
                description: same as the previous description.
        attributes:
          type: object
          description: |
            Custom attributes or traits for an NFT. You can create 2 types of attributes, fixed or variables. **Fixed**: We include these attributes in the metadata of every NFT minted in the collection with a fixed value. You can add attributes like artist name, Twitter, Discord, copyright etc. You define their value here, and then you don't have to submit them during the NFT creation step. **Variables**: Here you set a placeholder value, and we evaluate variables attributes during the NFT creation step. As you can see in the example, we defined five traits (colour, body, eyes, face, and accessories), but we don't specify the value, just a tag between `<>`.
        version:
          type: string
          description: CIP 25 - NFT Metadata Standard Version
    create_collection_request:
      description: Create NFT Collection request
      type: object
      properties:
        name:
          type: string
          description: Collection name. The collection name is internal to your Tangocrypto account. This is just a way to identify different collections.
        description:
          type: string
          description: Collection description. The collection description is internal to your Tangocrypto account.
        url:
          type: string
          description: URL of the website where the collection is going to be sold.
        payout_address:
          type: string
          description: Wallet address that is going to receive the payments of the NFT sale. This should be a wallet address of the seller.
        policy:
          type: object
          description: |
            Policy configuration for every NFT in the collection. When you create a new collection we do several steps in the background; we create a new key pair (*public verification key/private signing key*), a *policy script* and the *policy id*. Then during the sale process, all the tokens are minted with the same *policy script* and the *policy id* is attached permanently to the NFT. 
          required:
            - lock
          properties:
            lock:
              type: boolean
              description: |
                Defines if the policy will be locked or not. If you select `false` then you are not required to chose a date and time to lock the policy, therefore the policy will be open and you can be minting NFTs under this policy forever. If you set this parameter to `true` then you have to specify a `locktime` date.
              enum:
                - true
                - false
            lock_time:
              type: string
              description: |
                Locktime date in ISO 8601 format `yyyy-mm-ddThh:mm:ss[.mmm]`. It defines how long you'll be able to mint NFTs for the collection. The policy will lock after that date, and you won't be able to mint more NFTs using the same policy id (even if you use the same key). Hours and minutes are optional; if you set it to `2022-02-24`, it will automatically fill it with 0s, for example, `2022-02-24T00:00:00.000Z`. Take into consideration the desirability and size of your collection before setting this date and leave enough time for selling the NFTs. There is no limited time for the future.
        metadata:
          type: object
          description: |
            Metadata placeholders for the collection. The values between `< >` mean that they are placeholders. A placeholder is simply a variable that we will assign its value when you mint the NFT. You can use the metadata placeholder to define common attributes shared by all the NFTs in the collection, like the name, copyright, date issued, artist name, social media links, etc. Using metadata placeholders is not mandatory because you can define all the attributes while creating the individual NFTs. For more details about Metadata have a look at the CIP (https://cips.cardano.org/cips/cip25/)
          required:
            - name
            - metadata_image
          properties:
            name:
              type: string
              description: Metadata placeholder for the NFT asset name.
            asset_name:
              type: string
              description: Metadata placeholder for the NFT name.
            description:
              type: string
              description: Metadata placeholder for the NFT description.
            media_type:
              type: string
              description: 'Metadata placeholder for the media type (also known as a Multipurpose Internet Mail Extensions or MIME type) indicates the nature and format of a document, file, or assortment of bytes. It is common to have NFTs with MIME-type imag, audioand video.'
            image:
              type: string
              description: Metadata placeholder for the NFT image link.
            files:
              type: array
              description: 'Array of files used for files. This is used when you want to create an NFT with different file formats. For example, you can create several audio files and add them to the metadata.'
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: Asset name of the file
                  media_type:
                    type: string
                    description: same as the previous description.
                  src:
                    type: string
            attributes:
              type: string
              description: |
                Custom attributes or traits for an NFT. You can create 2 types of attributes, fixed or variables. **Fixed**: We include these attributes in the metadata of every NFT minted in the collection with a fixed value. You can add attributes like artist name, Twitter, Discord, copyright etc. You define their value here, and then you don't have to submit them during the NFT creation step. **Variables**: Here you set a placeholder value, and we evaluate variables attributes during the NFT creation step. As you can see in the example, we defined five traits (colour, body, eyes, face, and accessories), but we don't specify the value, just a tag between `<>`.
            version:
              type: string
              description: Metadata version
              default: v1
      required:
        - name
        - payout_address
        - policy
      example:
        name: Tango Collection
        description: Tango collection description
        url: 'https://www.tangocrypto.com'
        payout_address: addr_test1qpp33lzjgyzz6k86yy27kvkjepu8mfjy6g4l8rf2v8yjp4sla7h6txtvlevazp6jylz0w90y8yz0uec3cder28r47sssj9w2kd
        policy:
          lock: true
          lock_time: '2022-02-24'
        metadata:
          name: <name>
          asset_name: <asset_name>
          image: <image_link>
          media_type: <mime_type>
          description: <description>
          files:
            - name: <asset_name>
              media_type: <mime_type>
              src: <file_link_1>
          attributes:
            color: <color>
            body: <body>
            eyes: <eyes>
            face: <face>
            accessory: <accessory>
            collection: Tangocrypto Collection
            artist: Tangocrypto
            twitter: 'https://twitter.com/tango_crypto'
            copyright: Tangocrypto 2021
          version: '1.0'
    create_collection_response:
      type: object
      properties:
        id:
          type: string
          description: Collection id
        name:
          type: string
          description: Collection name. The collection name is internal to your Tangocrypto account. This is just a way to identify different collections.
        url:
          type: string
          description: URL of the website where the collection is going to be sold.
        description:
          type: string
          description: Collection description. The collection description is internal to your Tangocrypto account.
        payout_address:
          type: string
          description: Wallet address that is going to receive the payments of the NFT sale. This should be a wallet address of the seller.
        policy:
          type: object
          description: |
            Policy configuration for every NFT in the collection. When you create a new collection we do several steps in the background; we create a new key pair (*public verification key/private signing key*), a *policy script* and the *policy id*. Then during the sale process, all the tokens are minted with the same *policy script* and the *policy id* is attached permanently to the NFT. 
          properties:
            lock:
              type: boolean
              description: |
                Defines if the policy will be locked or not. If you select `false` then you are not required to chose a date and time to lock the policy, therefore the policy will be open and you can be minting NFTs under this policy forever. If you set this parameter to `true` then you have to specify a `locktime` date.
            lock_time:
              type: string
              description: |
                Locktime date in ISO 8601 format `yyyy-mm-ddThh:mm:ss[.mmm]`. It defines how long you'll be able to mint NFTs for the collection. The policy will lock after that date, and you won't be able to mint more NFTs using the same policy id (even if you use the same key). Hours and minutes are optional; if you set it to `2022-02-24`, it will automatically fill it with 0s, for example, `2022-02-24T00:00:00.000Z`. Take into consideration the desirability and size of your collection before setting this date and leave enough time for selling the NFTs. There is no limited time for the future.
            policy_id:
              type: string
              description: |
                Cardano NFTs need to be identified by the policy id. This id is unique and attached permanently to the asset.
            script:
              $ref: '#/components/schemas/policy_script'
        metadata:
          $ref: '#/components/schemas/nft_collection_metadata'
        created_at:
          type: string
          description: Creation datetime in ISO 8601 format.
        updated_at:
          type: string
          description: Update datetime in ISO 8601 format.
      example:
        id: e1d7fe1d97c64518a5c51011edcc1a31
        name: Tango Collection
        url: 'https://www.tangocrypto.com'
        description: Tango collection description
        payout_address: addr_test1qpp33lzjgyzz6k86yy27kvkjepu8mfjy6g4l8rf2v8yjp4sla7h6txtvlevazp6jylz0w90y8yz0uec3cder28r47sssj9w2kd
        policy:
          lock: true
          lock_time: '2022-02-24T00:00:00.000Z'
          policy_id: 6a16d7d312dfcbcb4f676fa31893cf6c456508d84472309f3aa7c998
          script:
            type: all
            scripts:
              - type: sig
                keyHash: 76bcc8cf947649636f027e705a30ec66fa0476971aef51d219323c07
              - type: before
                slot: 54094491
        metadata:
          label: '721'
          asset_name: <asset_name>
          name: <name>
          image: <image_link>
          media_type: <mime_type>
          description: <description>
          files:
            - name: <asset_name>
              media_type: <mime_type>
              src: <file_link_1>
          attributes:
            color: <color>
            body: <body>
            eyes: <eyes>
            face: <face>
            accessory: <accessory>
            collection: Tangocrypto Collection
            artist: Tangocrypto
            twitter: 'https://twitter.com/tango_crypto'
            copyright: Tangocrypto 2021
          version: '1.0'
        created_at: '2022-02-23T08:21:38.908Z'
        updated_at: '2022-02-23T08:21:38.908Z'
    retrieve_collection_response:
      type: object
      properties:
        id:
          type: string
          description: Collection id
        name:
          type: string
          description: Collection name. The collection name is internal to your Tangocrypto account. This is just a way to identify different collections.
        url:
          type: string
          description: URL of the website where the collection is going to be sold.
        description:
          type: string
          description: Collection description. The collection description is internal to your Tangocrypto account.
        payout_address:
          type: string
          description: Wallet address that is going to receive the payments of the NFT sale. This should be a wallet address of the seller.
        policy:
          type: object
          description: |
            Policy configuration for every NFT in the collection. When you create a new collection we do several steps in the background; we create a new key pair (*public verification key/private signing key*), a *policy script* and the *policy id*. Then during the sale process, all the tokens are minted with the same *policy script* and the *policy id* is attached permanently to the NFT. 
          properties:
            lock:
              type: boolean
              description: |
                Defines if the policy will be locked or not. If you select `false` then you are not required to chose a date and time to lock the policy, therefore the policy will be open and you can be minting NFTs under this policy forever. If you set this parameter to `true` then you have to specify a `locktime` date.
            lock_time:
              type: string
              description: |
                Locktime date in ISO 8601 format `yyyy-mm-ddThh:mm:ss[.mmm]`. It defines how long you'll be able to mint NFTs for the collection. The policy will lock after that date, and you won't be able to mint more NFTs using the same policy id (even if you use the same key). Hours and minutes are optional; if you set it to `2022-02-24`, it will automatically fill it with 0s, for example, `2022-02-24T00:00:00.000Z`. Take into consideration the desirability and size of your collection before setting this date and leave enough time for selling the NFTs. There is no limited time for the future.
            policy_id:
              type: string
              description: |
                Cardano NFTs need to be identified by the policy id. This id is unique and attached permanently to the asset.
            script:
              $ref: '#/components/schemas/policy_script'
        metadata:
          $ref: '#/components/schemas/nft_collection_metadata'
        created_at:
          type: string
          description: Creation datetime in ISO 8601 format.
        updated_at:
          type: string
          description: Update datetime in ISO 8601 format.
      example:
        id: e1d7fe1d97c64518a5c51011edcc1a31
        name: Tango Collection
        url: 'https://www.tangocrypto.com'
        description: Tango collection description
        payout_address: addr_test1qpp33lzjgyzz6k86yy27kvkjepu8mfjy6g4l8rf2v8yjp4sla7h6txtvlevazp6jylz0w90y8yz0uec3cder28r47sssj9w2kd
        policy:
          lock: true
          lock_time: '2022-02-24T00:00:00.000Z'
          policy_id: 6a16d7d312dfcbcb4f676fa31893cf6c456508d84472309f3aa7c998
          script:
            type: all
            scripts:
              - type: sig
                keyHash: 76bcc8cf947649636f027e705a30ec66fa0476971aef51d219323c07
              - type: before
                slot: 54094491
        metadata:
          label: '721'
          asset_name: <asset_name>
          name: <name>
          image: <image_link>
          media_type: <mime_type>
          description: <description>
          files:
            - name: <asset_name>
              media_type: <mime_type>
              src: <file_link_1>
          attributes:
            color: <color>
            body: <body>
            eyes: <eyes>
            face: <face>
            accessory: <accessory>
            collection: Tangocrypto Collection
            artist: Tangocrypto
            twitter: 'https://twitter.com/tango_crypto'
            copyright: Tangocrypto 2021
          version: '1.0'
        created_at: '2022-02-23T08:21:38.908Z'
        updated_at: '2022-02-23T08:21:38.908Z'
    update_collection_request:
      description: Create NFT Collection request
      type: object
      properties:
        name:
          type: string
          description: Collection name. The collection name is internal to your Tangocrypto account. This is just a way to identify different collections.
        description:
          type: string
          description: Collection description. The collection description is internal to your Tangocrypto account.
        url:
          type: string
          description: URL of the website where the collection is going to be sold.
        payout_address:
          type: string
          description: Wallet address that is going to receive the payments of the NFT sale. This should be a wallet address of the seller.
        policy:
          type: object
          description: |
            Policy configuration for every NFT in the collection. When you create a new collection we do several steps in the background; we create a new key pair (*public verification key/private signing key*), a *policy script* and the *policy id*. Then during the sale process, all the tokens are minted with the same *policy script* and the *policy id* is attached permanently to the NFT. 
          required:
            - lock
          properties:
            lock:
              type: boolean
              description: |
                Defines if the policy will be locked or not. If you select `false` then you are not required to chose a date and time to lock the policy, therefore the policy will be open and you can be minting NFTs under this policy forever. If you set this parameter to `true` then you have to specify a `locktime` date.
              enum:
                - true
                - false
            lock_time:
              type: string
              description: |
                Locktime date in ISO 8601 format `yyyy-mm-ddThh:mm:ss[.mmm]`. It defines how long you'll be able to mint NFTs for the collection. The policy will lock after that date, and you won't be able to mint more NFTs using the same policy id (even if you use the same key). Hours and minutes are optional; if you set it to `2022-02-24`, it will automatically fill it with 0s, for example, `2022-02-24T00:00:00.000Z`. Take into consideration the desirability and size of your collection before setting this date and leave enough time for selling the NFTs. There is no limited time for the future.
        metadata:
          type: object
          description: |
            Metadata placeholders for the collection. The values between `< >` mean that they are placeholders. A placeholder is simply a variable that we will assign its value when you mint the NFT. You can use the metadata placeholder to define common attributes shared by all the NFTs in the collection, like the name, copyright, date issued, artist name, social media links, etc. Using metadata placeholders is not mandatory because you can define all the attributes while creating the individual NFTs. For more details about Metadata have a look at the CIP (https://cips.cardano.org/cips/cip25/)
          required:
            - name
            - metadata_image
          properties:
            name:
              type: string
              description: Metadata placeholder for the NFT asset name.
            asset_name:
              type: string
              description: Metadata placeholder for the NFT name.
            description:
              type: string
              description: Metadata placeholder for the NFT description.
            media_type:
              type: string
              description: 'Metadata placeholder for the media type (also known as a Multipurpose Internet Mail Extensions or MIME type) indicates the nature and format of a document, file, or assortment of bytes. It is common to have NFTs with MIME-type imag, audioand video.'
            image:
              type: string
              description: Metadata placeholder for the NFT image link.
            files:
              type: array
              description: 'Array of files used for files. This is used when you want to create an NFT with different file formats. For example, you can create several audio files and add them to the metadata.'
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: Asset name of the file
                  media_type:
                    type: string
                    description: same as the previous description.
                  src:
                    type: string
            attributes:
              type: string
              description: |
                Custom attributes or traits for an NFT. You can create 2 types of attributes, fixed or variables. **Fixed**: We include these attributes in the metadata of every NFT minted in the collection with a fixed value. You can add attributes like artist name, Twitter, Discord, copyright etc. You define their value here, and then you don't have to submit them during the NFT creation step. **Variables**: Here you set a placeholder value, and we evaluate variables attributes during the NFT creation step. As you can see in the example, we defined five traits (colour, body, eyes, face, and accessories), but we don't specify the value, just a tag between `<>`.
            version:
              type: string
              description: Metadata version
              default: v1
      required:
        - name
        - payout_address
        - policy
      example:
        name: Tango Collection
        description: Tango collection description
        url: 'https://www.tangocrypto.com'
        payout_address: addr_test1qpp33lzjgyzz6k86yy27kvkjepu8mfjy6g4l8rf2v8yjp4sla7h6txtvlevazp6jylz0w90y8yz0uec3cder28r47sssj9w2kd
    list_collections_response:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/nft_collection'
        cursor:
          type: string
          minLength: 1
      example:
        data:
          - id: 3a78f8c00d8542278f70e554cf303447
            name: Complete Collection
            url: 'https://www.tangocrypto.com'
            description: Complete collection description
            payout_address: addr_test1qz5xdujk7unjmyrvqazy7l4w9dzxxfgt48ppv9tsjwywrzckyjqzaxt9rkqxc62m7tcdfylykzzjktqzlwssxfl3mlyqafvh99
            policy:
              lock: true
              lock_time: '2027-01-24T04:18:59.758Z'
              policy_id: 15b3a03bab3ea4fb2aeee83a973e7fea63746bdc03ca4dc2941469f3
              script:
                type: all
                scripts:
                  - type: sig
                    keyHash: f91dce420304c2ce0c62ac77c78f9cc94d5266ad88bdf4f868a17dab
                  - type: before
                    slot: '209198046'
            metadata:
              label: '721'
              asset_name: <asset_name>
              name: <name>
              image: <image_link>
              media_type: <mime_type>
              description: <description>
              attributes:
                face: <face>
                twitter: 'https://twitter.com/tango_crypto'
                copyright: Tangocrypto 2021
                color: <color>
                artist: Tangocrypto
                collection: Tangocrypto Collection
                body: <body>
                eyes: <eyes>
                accessory: <accessory>
              version: '1.0'
            created_at: '2022-02-23T08:15:01.576Z'
            updated_at: '2022-02-23T08:15:01.576Z'
        cursor: a97f98a8c533ee55fc2c6897c9b50506dc8d65b924062d1c9e36fcd5b2d98e9b902405daa93030e0b675027a3b6af996311794de3e36f9c70771f19485f176607d834f6bc4fd664e0f68d4c28ef955c22388e31bc17872cc4ed05354c047fe44f8d09375a7fd80b7910411b253066a4e
    collection_delete_response:
      type: object
      example:
        result: SUCCESS
        status_code: 200
      properties:
        result:
          type: string
          enum:
            - SUCCESS
            - ERROR
        status_code:
          type: number
    nft_token:
      type: object
      properties:
        id:
          type: string
          description: NFT id. This id is within your Tangocrypto account.
        collection:
          type: object
          description: Collection information
          properties:
            id:
              type: string
              description: Collection id
            name:
              type: string
              description: Collection name
            description:
              type: string
              description: Collection description
        policy:
          type: object
          properties:
            lock_time:
              type: string
              description: |
                Locktime date in ISO 8601 format `yyyy-mm-ddThh:mm:ss[.mmm]`. It defines how long you'll be able to mint NFTs for the collection. The policy will lock after that date, and you won't be able to mint more NFTs using the same policy id (even if you use the same key). Hours and minutes are optional; if you set it to `2022-02-24`, it will automatically fill it with 0s, for example, `2022-02-24T00:00:00.000Z`. Take into consideration the desirability and size of your collection before setting this date and leave enough time for selling the NFTs. There is no limited time for the future.
            lock:
              type: boolean
              description: 'Defines if the policy will be locked or not. If you select falsethen you are not required to choose a date and time to lock the policy, therefore the policy will be open and you can be minting NFTs under this policy forever.  If you set this parameter to true then you have to specify a locktime date.'
            policy_id:
              type: string
              description: Cardano NFTs need to be identified by the policy id. This id is unique and attached permanently to the asset.
            script:
              $ref: '#/components/schemas/policy_script'
        metadata:
          type: object
          description: NFT Metadata. Here you can see exactly how the metadata will look like once the NFT is minted.
        created_at:
          type: number
          description: Creation datetime in ISO 8601 format.
        updated_at:
          type: number
          description: Update datetime in ISO 8601 format.
      example:
        id: 59aacd9bab9746f9a2f9f334b2f20c70
        collection:
          id: 9c024f811654433b97f3b2719f00f604
          name: Tango collection description
          description: Collection description
        policy:
          lock_time: '2021-10-20T21:53:10Z'
          lock: true
          policy_id: ebe10abbfc5ff382bf8eb7ed44bb8f3632828659ebba917bb8c3ccb6
          script:
            type: all
            scripts:
              - type: sig
                keyHash: a65cef161eef7a3848f07c1a127f501b961194938478e92988813961
              - type: before
                slot: '46854873'
        metadata:
          '721':
            ebe10abbfc5ff382bf8eb7ed44bb8f3632828659ebba917bb8c3ccb6:
              TheTokenName01:
                name: The Long Token Name 01
                image: 'ipfs://QmY9gydScXwQA4wzhFo1vqVpDkgi7sP4gH5TFmz8GYPF98'
                mediaType: image/png
                description: Token description 3
                face: rounded
                twitter: 'https://twitter.com/tango_crypto'
                copyright: Tangocrypto 2021
                color: Blue
                artist: Tangocrypto
                collection: Tangocrypto Collection
                body: fat
                eyes: green
                accessory: Hat
            version: '1.0'
        created_at: '2021-11-30T23:17:36.791Z'
        updated_at: '2021-11-30T23:17:36.791Z'
    create_nft_request:
      description: Token request
      type: object
      properties:
        tokens:
          type: array
          uniqueItems: false
          items:
            type: object
            properties:
              name:
                type: string
                description: Display name. Between 2 and 32 characters (maximum 64 bytes for UTF-8 encoded).
              asset_name:
                type: string
                description: Take into consideration is the name is case sensitive and is between 2 and 32 characters (maximum 64 bytes for UTF-8 encoded).
              description:
                type: string
                description: Token description. Between 2 and 32 characters (maximum 64 bytes for UTF-8 encoded).
              media_type:
                type: string
                description: Media type.
              image:
                type: string
                description: 'base64 encoded image. '
              metadata_attributes:
                type: array
                uniqueItems: false
                description: 'You have to specify the values for the placeholder attributes for every token as defined in the collection attribute placeholder definition when you create the collection. Please take into consideration that we have to define these values for every single NFT in the collection. For example, we set the colour, body, eyes, face and mime type for that particular NFT.For more details about Metadata have a look at the CIP (https://cips.cardano.org/cips/cip25/)'
                items:
                  type: object
                  additionalProperties: false
                  properties:
                    tag:
                      type: string
                      description: Use the `tag` to match the placeholder defined in the collection.
                    value:
                      type: string
                      description: Use the `value` to set a value for the placeholder `tag`.
              custom_attributes:
                type: object
                description: Here you can set any arbitrary attributes that you didn't include in the collection attributes placeholder definition. Use key-value pairs to define unique attributes for each NFT.
                properties:
                  key1:
                    type: string
                  key2:
                    type: string
            required:
              - name
              - asset_name
              - image
      required:
        - tokens
      example:
        tokens:
          - name: Text with spaces 01
            asset_name: TextWithoutSpaces01
            description: This is the description
            media_type: image/png
            image: iVBORw0KGgoAAAANSU.....hEUgAADQYAAA0HCAYAAACB0xAqAAAACXBIWXMA
            metadata_attributes:
              - tag: <color>
                value: Red
              - tag: <body>
                value: Skinny
              - tag: <eyes>
                value: Blue
              - tag: <accessory>
                value: Pen
              - tag: <face>
                value: Rounded
            custom_attributes:
              location: city
              hat: baseball cap
    create_nft_response:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/nft_token'
        status_code:
          type: number
      example:
        data:
          - id: e9e00b33e0a34edcaf4534a2f96a637d
            asset_name: TangocryptoNFT08
            name: Tangocrypto NFT 08
            description: Description for Tangocrypto NFT 08
            image: 'ipfs://QmP8uBgxmTpduCUbasQRCEpiq1g9KEjxuRfR5VcvifWoNo'
            media_type: image/png
            collection:
              id: 5f92c5e01c4848e4b6271a9bf48a3bd9
              name: Tango Collection
              url: 'https://www.tangocrypto.com'
              description: Tango collection description
            policy:
              lock: true
              lock_time: '2022-01-03T15:35:10.000Z'
              policy_id: 1373bf16cdea380e6c9c716d0f56f021b9e9ddea90b248dae6310d95
              script:
                type: all
                scripts:
                  - type: sig
                    keyHash: ac1746df0ba039de81274d472a477fced610f57cebc5c7841074f54c
                  - type: before
                    slot: '46854826'
            metadata:
              '721':
                1373bf16cdea380e6c9c716d0f56f021b9e9ddea90b248dae6310d95:
                  TangocryptoNFT08:
                    face: Happy
                    twitter: 'https://twitter.com/tango_crypto'
                    copyright: Tangocrypto 2021
                    color: Orange
                    artist: Tangocrypto
                    collection: Tangocrypto Collection
                    body: <body>
                    eyes: green
                    accessory: None
                    fruit: 'no'
                    type: pumpking7
                    name: Tangocrypto NFT 08
                    image: 'ipfs://QmP8uBgxmTpduCUbasQRCEpiq1g9KEjxuRfR5VcvifWoNo'
                    description: Description for Tangocrypto NFT 08
                    mediaType: image/png
                version: '1.0'
            created_at: '2021-11-30T23:17:36.791Z'
            updated_at: '2021-11-30T23:17:36.791Z'
        status_code: 201
    delete_nft_response:
      type: object
      example:
        result: SUCCESS
        status_code: 200
      properties:
        result:
          type: string
          enum:
            - SUCCESS
            - ERROR
        status_code:
          type: number
    list_nft_response:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/nft_token'
        status_code:
          type: number
      example:
        data:
          - id: 9879287d51694ef0ac9abd6a615152d2
            asset_name: TangocryptoNFT05
            name: Tangocrypto NFT 05
            description: Description for Tangocrypto NFT 05
            image: 'ipfs://QmdR5yqYoBibojXzBX3tYir4g1eYyU2TRoV9MiC4VACFnq'
            media_type: image/png
            collection:
              id: 5f92c5e01c4848e4b6271a9bf48a3bd9
              name: Tango Collection
              url: 'https://www.tangocrypto.com'
              description: Tango collection description
            policy:
              lock: true
              lock_time: '2022-01-03T15:35:10.000Z'
              policy_id: 1373bf16cdea380e6c9c716d0f56f021b9e9ddea90b248dae6310d95
              script:
                type: all
                scripts:
                  - type: sig
                    keyHash: ac1746df0ba039de81274d472a477fced610f57cebc5c7841074f54c
                  - type: before
                    slot: '46854826'
            metadata:
              '721':
                version: '1.0'
                1373bf16cdea380e6c9c716d0f56f021b9e9ddea90b248dae6310d95:
                  TangocryptoNFT05:
                    image: 'ipfs://QmdR5yqYoBibojXzBX3tYir4g1eYyU2TRoV9MiC4VACFnq'
                    copyright: Tangocrypto 2021
                    color: Orange
                    artist: Tangocrypto
                    fruit: 'no'
                    description: Description for Tangocrypto NFT 05
                    mediaType: image/png
                    collection: Tangocrypto Collection
                    body: Rounded
                    type: pumpking2
                    eyes: <eyes>
                    face: Happy
                    twitter: 'https://twitter.com/tango_crypto'
                    name: Tangocrypto NFT 05
                    accessory: None
            created_at: '2021-11-30T21:04:20.250Z'
            updated_at: '2021-11-30T21:04:20.250Z'
          - id: e9e00b33e0a34edcaf4534a2f96a637d
            asset_name: TangocryptoNFT08
            name: Tangocrypto NFT 08
            description: Description for Tangocrypto NFT 08
            image: 'ipfs://QmP8uBgxmTpduCUbasQRCEpiq1g9KEjxuRfR5VcvifWoNo'
            media_type: image/png
            collection:
              id: 5f92c5e01c4848e4b6271a9bf48a3bd9
              name: Tango Collection
              url: 'https://www.tangocrypto.com'
              description: Tango collection description
            policy:
              lock: true
              lock_time: '2022-01-03T15:35:10.000Z'
              policy_id: 1373bf16cdea380e6c9c716d0f56f021b9e9ddea90b248dae6310d95
              script:
                type: all
                scripts:
                  - type: sig
                    keyHash: ac1746df0ba039de81274d472a477fced610f57cebc5c7841074f54c
                  - type: before
                    slot: '46854826'
            metadata:
              '721':
                version: '1.0'
                1373bf16cdea380e6c9c716d0f56f021b9e9ddea90b248dae6310d95:
                  TangocryptoNFT08:
                    image: 'ipfs://QmP8uBgxmTpduCUbasQRCEpiq1g9KEjxuRfR5VcvifWoNo'
                    copyright: Tangocrypto 2021
                    color: Orange
                    artist: Tangocrypto
                    fruit: 'no'
                    description: Description for Tangocrypto NFT 08
                    mediaType: image/png
                    collection: Tangocrypto Collection
                    body: <body>
                    type: pumpking7
                    eyes: green
                    face: Happy
                    twitter: 'https://twitter.com/tango_crypto'
                    name: Tangocrypto NFT 08
                    accessory: None
            created_at: '2021-11-30T23:17:36.791Z'
            updated_at: '2021-11-30T23:17:36.791Z'
        nextToken: a97f98a8c533ee55fc2c6897cbb90a05cc8065d3087e384bce6aa880b2848e93c7230f8df36d37e7e325062a6861ac943d19c68f7e2fecc72916f1fdb5f11f3965f22e1eaae56c461e6fb8e994af04c579dde81dc12925c01e800207914bad40fcd49426aaa887b2920041a41959
    retrieve_nft_response:
      $ref: '#/components/schemas/nft_token'
      example:
        id: 0dc629b0073f4a829f02cb92eccaa7f0
        asset_name: TangocryptoNFT03
        name: Tangocrypto NFT 03
        description: Description for Tangocrypto NFT 03
        image: 'ipfs://QmZHWcx7afrxuvcqeqntZtfv93c2VciBWjyi9LCwUEKZmx'
        media_type: png
        metadata_attributes:
          - name: Attribute color
            value: Blue
            tag: <color>
          - name: Attribute body
            value: Rounded
            tag: <body>
          - name: Attribute accessory
            value: None
            tag: <accessory>
          - name: Attribute project
            value: My project
            tag: <attributes_project>
        custom_attributes:
          pepe: grillo
          rarity: '1'
        collection:
          id: 917393d8e8f24483ba79d3f8c8b2d2a7
          name: Tango Collection 2
          url: 'https://www.tangocrypto.com'
          description: Tango collection description 2
        policy:
          lock: true
          lock_time: '2022-02-24T00:00:00.000Z'
          policy_id: a8d449a57075fc2ec1adf18196dcdf882de1234800fc9befca48b84f
          script:
            type: all
            scripts:
              - type: sig
                keyHash: cf8d196572ba38237f82d5e16d6e9c7e0a0c1e24421262adecf11832
              - type: before
                slot: '54094480'
        metadata:
          '721':
            version: '1.0'
            a8d449a57075fc2ec1adf18196dcdf882de1234800fc9befca48b84f:
              TangocryptoNFT03:
                image: 'ipfs://QmZHWcx7afrxuvcqeqntZtfv93c2VciBWjyi9LCwUEKZmx'
                copyright: Tangocrypto 2021
                color: Blue
                artist: Tangocrypto
                description: Description for Tangocrypto NFT 03
                mediaType: png
                collection: Tangocrypto Collection
                body: Rounded
                eyes: <eyes>
                face: <face>
                twitter: 'https://twitter.com/tango_crypto'
                name: Tangocrypto NFT 03
                files:
                  - name: <asset_name>
                    src: <file_link_1>
                    mediaType: <mime_type>
                accessory: None
                pepe: grillo
                rarity: '1'
        files_status: READY
        created_at: '2022-02-23T20:56:02.925Z'
        updated_at: '2022-02-23T20:56:04.413Z'
    create_nft_sale_request:
      type: object
      properties:
        type:
          type: string
          enum:
            - fixed
            - random
          description: |
            <br /> Use `fixed` for selling a particular token or token list identified by the token-id. 
            <br /> Use `random` for random sales, it will pick random tokens from the collection.'
        price:
          type: number
          description: Individual NFT price in Lovelace (1 ADA = 1000000 Lovelace).
        lock_time:
          type: number
          description: 'Reservation time in *ms*. This timer defines how long an NFT will be reserved once a potential buyer starts the buying process. During this time interval, the NFT won''t be available for sale. No other buyer will be able to create a new reservation. If the payment is not received and this timer expires, the NFT will be ready for sale again, and another buyer can reserve it.'
        tokens:
          type: array
          description: An array of the token ids of the NFTs you want to sell. This field is required only for `fixed` sales. If you use `ramdom` sale you should omit this field.
          items:
            type: string
      required:
        - type
        - price
        - lock_time
      example:
        type: fixed
        price: 6000000
        lock_time: 300000
        tokens:
          - e279afd320d54b23afffd7ca440e3a6e
          - e9e00b33e0a34edcaf4534a2f96a637d
    create_nft_sale_response:
      type: object
      properties:
        result:
          type: object
          properties:
            id:
              type: string
              description: Sale id. This gives you a way to identify a particular sale. Every time you generate a sale you'll get a new sale id.
            status:
              type: string
              enum:
                - OPEN
                - RESERVED
                - RESERVATION_EXPIRED
                - NFT_SENT
              description: |
                NFT status: <br />  - `OPEN`: The NFT is ready to be sold. This is the state for all newly created NFTs.  <br />  - `RESERVED`: When you create a new sale, we change the status of the NFT to reserved. In this state, we are waiting to receive a payment from your customer. <br />  - `RESERVATION_EXPIRED`: No payment was received and the reservation time expired.  <br /> - `NFT_SENT`: Payment is received and the NFT was sent to the buyer. 
            type:
              type: string
              enum:
                - fixed
                - random
              description: 'Use `fixed` for selling a particular token or token list identified by the token-id. Use `random` for random sales, it will pick random tokens from the collection.'
            price:
              type: string
              description: Individual token price in Lovelace (1 ADA = 1000000 Lovelace).
            quantity:
              type: string
              description: Number of tokens for sale.
            payment_address:
              type: string
              description: Address where the customer has to make the payment.
            reserved_time:
              type: string
              description: 'Reservation time in ms. This timer defines how long an NFT will be reserved once a potential buyer starts the buying process. During this time interval, the NFT won''t be available for sale. No other buyer will be able to create a new reservation. If the payment is not received, and this timer expires then the NFT is ready for sale again and it can be reserved by another buyer.'
            tangocrypto_fee:
              type: string
              description: 'Tangocrypto fee per NFT minted. '
            token:
              $ref: '#/components/schemas/nft_token'
        status_code:
          type: number
      example:
        result:
          id: 330d7f90d6a646e0ae9dc01c3edb791d
          status: NFT_SENT
          type: fixed
          price: '6000000'
          quantity: '1'
          payment_address: addr_test1qq4hlnhckpqgthzxfxhsdjtf7a3punw0vnx9mfwryq5mzg49f7fnpmhmtw73l0lup0gjs7g5t7qswm8knk4vsx7tklgqkcdv38
          reserved_time: '300000'
          tangocrypto_fee: '2000000'
          token:
            id: e9e00b33e0a34edcaf4534a2f96a637d
            asset_name: TangocryptoNFT08
            name: Tangocrypto NFT 08
            description: Description for Tangocrypto NFT 08
            image: 'ipfs://QmP8uBgxmTpduCUbasQRCEpiq1g9KEjxuRfR5VcvifWoNo'
            media_type: image/png
            collection:
              id: 5f92c5e01c4848e4b6271a9bf48a3bd9
              name: Tango Collection
              url: 'https://www.tangocrypto.com'
              description: Tango collection description
            policy:
              lock: true
              lock_time: '2022-01-03T15:35:10.000Z'
              policy_id: 1373bf16cdea380e6c9c716d0f56f021b9e9ddea90b248dae6310d95
              script:
                type: all
                scripts:
                  - type: sig
                    keyHash: ac1746df0ba039de81274d472a477fced610f57cebc5c7841074f54c
                  - type: before
                    slot: '46854826'
            metadata:
              '721':
                1373bf16cdea380e6c9c716d0f56f021b9e9ddea90b248dae6310d95:
                  TangocryptoNFT08:
                    face: Happy
                    twitter: 'https://twitter.com/tango_crypto'
                    copyright: Tangocrypto 2021
                    color: Orange
                    artist: Tangocrypto
                    collection: Tangocrypto Collection
                    body: <body>
                    eyes: green
                    accessory: None
                    fruit: 'no'
                    type: pumpking7
                    name: Tangocrypto NFT 08
                    image: 'ipfs://QmP8uBgxmTpduCUbasQRCEpiq1g9KEjxuRfR5VcvifWoNo'
                    description: Description for Tangocrypto NFT 08
                    mediaType: image/png
                version: '1.0'
            created_at: '2021-11-30T23:17:36.791Z'
            updated_at: '2021-11-30T23:17:36.791Z'
        status_code: 200
    retrieve_nft_sale_response:
      type: object
      properties:
        result:
          type: object
          properties:
            id:
              type: string
              description: Sale id. This gives you a way to identify a particular sale. Every time you generate a sale you'll get a new sale id.
            status:
              type: string
              enum:
                - OPEN
                - RESERVED
                - RESERVATION_EXPIRED
                - NFT_SENT
              description: |
                NFT status: <br />  - `OPEN`: The NFT is ready to be sold. This is the state for all newly created NFTs.  <br />  - `RESERVED`: When you create a new sale, we change the status of the NFT to reserved. In this state, we are waiting to receive a payment from your customer. <br />  - `RESERVATION_EXPIRED`: No payment was received and the reservation time expired.  <br /> - `NFT_SENT`: Payment is received and the NFT was sent to the buyer. 
            type:
              type: string
              enum:
                - fixed
                - random
              description: 'Use `fixed` for selling a particular token or token list identified by the token-id. Use `random` for random sales, it will pick random tokens from the collection.'
            price:
              type: string
              description: Individual token price in Lovelace (1 ADA = 1000000 Lovelace).
            quantity:
              type: string
              description: Number of tokens for sale.
            payment_address:
              type: string
              description: Address where the customer has to make the payment.
            reserved_time:
              type: string
              description: 'Reservation time in ms. This timer defines how long an NFT will be reserved once a potential buyer starts the buying process. During this time interval, the NFT won''t be available for sale. No other buyer will be able to create a new reservation. If the payment is not received, and this timer expires then the NFT is ready for sale again and it can be reserved by another buyer.'
            tangocrypto_fee:
              type: string
              description: 'Tangocrypto fee per NFT minted. '
            token:
              $ref: '#/components/schemas/nft_token'
        tx_id:
          type: string
          description: 'Transaction ID of the minting operation. You can paste the Tx Id in a block explorer like Cardanoscan (https://cardanoscan.io) to see the transaction details.'
          example: ee68694c061d8cf7a99e95e8286dcad51cb487c4de313f65ef5a45013f8f00dd
        status_code:
          type: number
      example:
        result:
          id: 330d7f90d6a646e0ae9dc01c3edb791d
          status: NFT_SENT
          type: fixed
          price: '6000000'
          quantity: '1'
          payment_address: addr_test1qq4hlnhckpqgthzxfxhsdjtf7a3punw0vnx9mfwryq5mzg49f7fnpmhmtw73l0lup0gjs7g5t7qswm8knk4vsx7tklgqkcdv38
          reserved_time: '300000'
          tangocrypto_fee: '2000000'
          token:
            id: e9e00b33e0a34edcaf4534a2f96a637d
            asset_name: TangocryptoNFT08
            name: Tangocrypto NFT 08
            description: Description for Tangocrypto NFT 08
            image: 'ipfs://QmP8uBgxmTpduCUbasQRCEpiq1g9KEjxuRfR5VcvifWoNo'
            media_type: image/png
            collection:
              id: 5f92c5e01c4848e4b6271a9bf48a3bd9
              name: Tango Collection
              url: 'https://www.tangocrypto.com'
              description: Tango collection description
            policy:
              lock: true
              lock_time: '2022-01-03T15:35:10.000Z'
              policy_id: 1373bf16cdea380e6c9c716d0f56f021b9e9ddea90b248dae6310d95
              script:
                type: all
                scripts:
                  - type: sig
                    keyHash: ac1746df0ba039de81274d472a477fced610f57cebc5c7841074f54c
                  - type: before
                    slot: '46854826'
            metadata:
              '721':
                1373bf16cdea380e6c9c716d0f56f021b9e9ddea90b248dae6310d95:
                  TangocryptoNFT08:
                    face: Happy
                    twitter: 'https://twitter.com/tango_crypto'
                    copyright: Tangocrypto 2021
                    color: Orange
                    artist: Tangocrypto
                    collection: Tangocrypto Collection
                    body: <body>
                    eyes: green
                    accessory: None
                    fruit: 'no'
                    type: pumpking7
                    name: Tangocrypto NFT 08
                    image: 'ipfs://QmP8uBgxmTpduCUbasQRCEpiq1g9KEjxuRfR5VcvifWoNo'
                    description: Description for Tangocrypto NFT 08
                    mediaType: image/png
                version: '1.0'
            created_at: '2021-11-30T23:17:36.791Z'
            updated_at: '2021-11-30T23:17:36.791Z'
          tx_id: ee68694c061d8cf7a99e95e8286dcad51cb487c4de313f65ef5a45013f8f00dd
        status_code: 200
    cancel_nft_sale_response:
      type: object
      properties:
        result:
          type: string
        status_code:
          type: number
      example:
        result: SUCCESS
        status_code: 200
    list_nft_sales_response:
      description: ''
      type: object
      properties:
        result:
          type: object
          properties:
            sales:
              type: array
              uniqueItems: false
              items:
                type: object
                additionalProperties: false
                properties:
                  id:
                    type: string
                    description: Sale id. This gives you a way to identify a particular sale. Every time you generate a sale you'll get a new sale id.
                  status:
                    type: string
                    enum:
                      - RESERVED
                      - RESERVATION_EXPIRED
                      - NFT_SENT
                    description: |
                      NFT status: <br />  - `OPEN`: The NFT is ready to be sold. This is the state for all newly created NFTs.  <br />  - `RESERVED`: When you create a new sale, we change the status of the NFT to reserved. In this state, we are waiting to receive a payment from your customer. <br />  - `RESERVATION_EXPIRED`: No payment was received and the reservation time expired.  <br /> - `NFT_SENT`: Payment is received and the NFT was sent to the buyer. 
                  type:
                    type: string
                    enum:
                      - fixed
                      - random
                    description: 'Use `fixed` for selling a particular token or token list identified by the token-id. Use `random` for random sales, it will pick random tokens from the collection.'
                  price:
                    type: string
                    description: Individual token price in Lovelace (1 ADA = 1000000 Lovelace).
                  quantity:
                    type: string
                    description: Number of tokens for sale.
                  payment_address:
                    type: string
                    description: Address where the customer has to make the payment.
                  reserved_time:
                    type: string
                    description: 'Reservation time in ms. This timer defines how long an NFT will be reserved once a potential buyer starts the buying process. During this time interval, the NFT won''t be available for sale. No other buyer will be able to create a new reservation. If the payment is not received, and this timer expires then the NFT is ready for sale again and it can be reserved by another buyer.'
                  tangocrypto_fee:
                    type: string
                    description: Tangocrypto fee per NFT minted.
                  token:
                    $ref: '#/components/schemas/nft_token'
                  tx_id:
                    type: string
            cursor:
              type: string
        status_code:
          type: number
      example:
        result:
          sales:
            - id: ff3f980fc29547e7b18a1888b916e720
              status: NFT_SENT
              type: fixed
              price: '6000000'
              quantity: '1'
              payment_address: addr_test1qp28uhsypnmvv40l2sr6vutg7sff4fx0xp8wgxgpzq8c0cgu4357l88l66j6vggekymqjsctzz975dpfr06ccv7udqvqla85mm
              reserved_time: '300000'
              tangocrypto_fee: '2000000'
              token:
                id: 9879287d51694ef0ac9abd6a615152d2
                asset_name: TangocryptoNFT05
                name: Tangocrypto NFT 05
                description: Description for Tangocrypto NFT 05
                image: 'ipfs://QmdR5yqYoBibojXzBX3tYir4g1eYyU2TRoV9MiC4VACFnq'
                media_type: image/png
                collection:
                  id: 5f92c5e01c4848e4b6271a9bf48a3bd9
                  name: Tango Collection
                  url: 'https://www.tangocrypto.com'
                  description: Tango collection description
                policy:
                  lock: true
                  lock_time: '2022-01-03T15:35:10.000Z'
                  policy_id: 1373bf16cdea380e6c9c716d0f56f021b9e9ddea90b248dae6310d95
                  script:
                    type: all
                    scripts:
                      - type: sig
                        keyHash: ac1746df0ba039de81274d472a477fced610f57cebc5c7841074f54c
                      - type: before
                        slot: '46854826'
                metadata:
                  '721':
                    version: '1.0'
                    1373bf16cdea380e6c9c716d0f56f021b9e9ddea90b248dae6310d95:
                      TangocryptoNFT05:
                        image: 'ipfs://QmdR5yqYoBibojXzBX3tYir4g1eYyU2TRoV9MiC4VACFnq'
                        copyright: Tangocrypto 2021
                        color: Orange
                        artist: Tangocrypto
                        fruit: 'no'
                        description: Description for Tangocrypto NFT 05
                        mediaType: image/png
                        collection: Tangocrypto Collection
                        body: Rounded
                        type: pumpking2
                        face: Happy
                        twitter: 'https://twitter.com/tango_crypto'
                        name: Tangocrypto NFT 05
                        accessory: None
                created_at: '2021-11-30T21:04:20.250Z'
                updated_at: '2021-11-30T21:04:20.250Z'
              tx_id: a543605a4e370c830910f77bbc620e06faa3a219476e97a4171c7a39e50a8a8d
            - id: 43ccad1027d44623854b3b29cb768490
              status: OPEN
              type: fixed
              price: '6000000'
              quantity: '1'
              payment_address: addr_test1qzp7l9345r7dkyvfk95xt4dryn92avt8pd85zlvsesumz04yg40kzqx5tuy2axtf6rjj03fuacvkdlnd99zgh0cmpjrs2uaxt6
              reserved_time: '-1'
              tangocrypto_fee: '2000000'
              token:
                id: e279afd320d54b23afffd7ca440e3a6e
                asset_name: TangocryptoNFT09
                name: Tangocrypto NFT 09
                description: Description for Tangocrypto NFT 09
                image: 'ipfs://QmP8uBgxmTpduCUbasQRCEpiq1g9KEjxuRfR5VcvifWoNo'
                media_type: image/png
                collection:
                  id: 5f92c5e01c4848e4b6271a9bf48a3bd9
                  name: Tango Collection
                  url: 'https://www.tangocrypto.com'
                  description: Tango collection description
                policy:
                  lock: true
                  lock_time: '2022-01-03T15:35:10.000Z'
                  policy_id: 1373bf16cdea380e6c9c716d0f56f021b9e9ddea90b248dae6310d95
                  script:
                    type: all
                    scripts:
                      - type: sig
                        keyHash: ac1746df0ba039de81274d472a477fced610f57cebc5c7841074f54c
                      - type: before
                        slot: '46854826'
                metadata:
                  '721':
                    version: '1.0'
                    1373bf16cdea380e6c9c716d0f56f021b9e9ddea90b248dae6310d95:
                      TangocryptoNFT09:
                        image: 'ipfs://QmP8uBgxmTpduCUbasQRCEpiq1g9KEjxuRfR5VcvifWoNo'
                        copyright: Tangocrypto 2021
                        color: Orange
                        artist: Tangocrypto
                        fruit: 'no'
                        description: Description for Tangocrypto NFT 09
                        mediaType: image/png
                        collection: Tangocrypto Collection
                        type: pumpking9
                        eyes: green
                        face: Happy
                        twitter: 'https://twitter.com/tango_crypto'
                        name: Tangocrypto NFT 09
                        accessory: None
                created_at: '2021-12-01T23:17:06.428Z'
                updated_at: '2021-12-01T23:17:06.428Z'
          cursor: ''
        status_code: 200
  securitySchemes:
    x-api-key:
      name: x-api-key
      type: apiKey
      in: header
security:
  - x-api-key: []
    pi-key: []
