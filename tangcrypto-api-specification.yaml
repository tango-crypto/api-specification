openapi: 3.0.0
info:
  title: Tangocrypto API
  x-logo:
    url: 'https://tangocrypto-img.s3.us-west-1.amazonaws.com/tangocrypto_white_bg.png'
    altText: Tangocrypto logo
  version: '1'
  contact:
    name: Tangocrypto Team
    url: 'https://www.tangocrypto.com'
    email: contact@tangocrypto.com
  description: |-
    ## Overview
     Tangocrypto API(Application Programing Interface) allows you fast and reliable access to the Cardano network that requires only minutes to integrate.


     ## API Key header

     When you sign up on https://www.tangocrypto.com and create an App an `x-api-key` is created. You must include the HTTP header `x-api-key` in every request in order to authenticate the API calls.

     ## Network and Account ID

     You can choose the mainnet or the testnet for your queries. The API requires a valid `Account ID` to be included with your request traffic. This identifier should be appended to the request URL.

     <table>
       <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>
       <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.tangocrypto.com/{account-id}/v1</td></tt></tr>
       <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.tangocrypto.com/{account-id}/v1</tt></td></tr>
     </table>

     ## Errors

     ### HTTP Status codes

     These are the response codes you are going to get when you query Tangocrypto API.

     <table>
       <tr><td><b>Code</b></td><td><b>Meaning</b></td></tr>
       <tr><td><tt><strong>400</strong></tt></td><td><strong>Bad Request</strong> - Your request is invalid. </td></tr>
       <tr><td><tt><strong>401</strong></tt></td><td><strong>Unauthorized</strong> - You must authenticate your request with an API key. Check out how to create a key if you do not have one. </td></tr>
       <tr><td><tt><strong>403</strong></tt></td><td><strong>Forbidden</strong> - Check you are using the right API KEY, or you've hit your capacity limit, or your request was rejected by your app's whitelist settings. </td></tr>
       <tr><td><tt><strong>404</strong></tt></td><td><strong>Not found</strong> - Endpoint not found. </td></tr>
       <tr><td><tt><strong>429</strong></tt></td><td><strong>Too Many Requests</strong> - You've exceeded your concurrent requests capacity. Check out the Rate Limits page for solutions.</td></tr>
       <tr><td><tt><strong>500</strong></tt></td><td><strong>Internal Server Error</strong> - We're unable to process your request right now. Get in touch with us if you see this.</td></tr>
     </table>
     
servers:
  - url: 'https://cardano-mainnet.tangocrypto.com/v1/{account-id}'
    description: Cardano Mainnet Network
    variables:
      account-id:
        default: f95831c3e1b0412b2e3750df46f95401
        description: Customer ID assigned by the service provider
  - url: 'https://cardano-testnet.tangocrypto.com/v1/{account-id}'
    description: Cardano Testnet Network
    variables:
      account-id:
        default: f95871c3e1b0412bbe3750df46f9540e
        description: Customer ID assigned by the service provider
tags:
  - name: Addresses
  - name: Transactions
  - name: Wallets
  - name: Blocks
  - name: Assets
  - name: Epochs
  - name: Pools
  - name: NFTs
  - name: NFTs > Collections
  - name: NFTs > Tokens
  - name: NFTs > Create
  - name: NFTs > Sales
paths:
  '/addresses/{address}':
    get:
      summary: Get address details
      operationId: get-address-detail
      description: Obtain information about an address.
      tags:
        - Addresses
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: Bech32 address.
          example: addr_test1qquxc75xmzzy7sy955pyz4tqg0ycgttjcv2u39ay929q2yp59kkfl90wf7f9vlm99fek6e9l5zh65td8jhw63hn9skqq8thxnw
      responses:
        '200':
          description: Return the address content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/address'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/{address}/utxos':
    get:
      tags:
        - Addresses
      summary: Address UTXOs
      description: UTXOs of the address.
      operationId: get-address-utxos
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: Bech32 address.
          example: addr_test1qquxc75xmzzy7sy955pyz4tqg0ycgttjcv2u39ay929q2yp59kkfl90wf7f9vlm99fek6e9l5zh65td8jhw63hn9skqq8thxnw
      responses:
        '200':
          description: Return the address content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/address_utxo'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/addresses/{address}/transactions':
    get:
      tags:
        - Addresses
      summary: Address transactions
      description: Transactions for an address.
      operationId: get-address-transactions
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: Bech32 address.
          example: addr_test1qquxc75xmzzy7sy955pyz4tqg0ycgttjcv2u39ay929q2yp59kkfl90wf7f9vlm99fek6e9l5zh65td8jhw63hn9skqq8thxnw
      responses:
        '200':
          description: Return the address content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/address_transactions'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/transactions/{hash}':
    get:
      summary: Get Transaction
      tags:
        - Transactions
      operationId: get-transaction
      description: Returns the information about a transaction requested by transaction hash.
      parameters:
        - in: path
          name: hash
          required: true
          schema:
            type: string
            format: 64-character case-sensitive hexadecimal string.
          description: Hash of the requested transaction
          example: 33e054b47f459a364da5cf02ad6d87dad69bd3bf167fd8708859552535155aa2
      responses:
        '200':
          description: Returns information about a transaction specified by a transaction hash
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/transactions/{hash}/utxos':
    get:
      summary: Get transaction UTXOs
      tags:
        - Transactions
      operationId: get-transaction-utxos
      description: Returns the UTXOs from a transaction specified by a transaction hash.
      parameters:
        - in: path
          name: hash
          required: true
          schema:
            type: string
            format: 64-character case-sensitive hexadecimal string.
          description: Hash of the requested transaction
          example: 5b730376c443e748705109cca163ed9115b0c4e6fd9459022864dfcc03dd4772
      responses:
        '200':
          description: Returns information about a transaction specified by a transaction hash
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction_utxo'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/transactions/{hash}/metadata':
    get:
      tags:
        - Transactions
      summary: Transaction metadata
      description: Obtain the transaction metadata.
      operationId: get-transaction-metadata
      parameters:
        - in: path
          name: hash
          required: true
          schema:
            type: string
            format: 64-character case-sensitive hexadecimal string.
          description: Hash of the requested transaction
          example: 33e054b47f459a364da5cf02ad6d87dad69bd3bf167fd8708859552535155aa2
      responses:
        '200':
          description: Obtain information about stake pool retirements within a specific transaction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction_metadata'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  /transactions/submit:
    post:
      tags:
        - Transactions
      operationId: submit-transaction
      summary: Submit a transaction
      description: Submit an already serialized transaction to the network.
      responses:
        '200':
          description: Returns the ID of the submitted transaction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction_submit'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/wallets/{stake_address}':
    get:
      summary: Get wallet stake
      tags:
        - Wallets
      description: Get wallet stake
      operationId: get-wallets-stake
      parameters:
        - in: path
          name: stake_address
          required: true
          schema:
            type: string
          description: Bech32 stake address.
          example: stake_test1uzxpncx82vfkl5ml00ws44hzfdh64r22kr93e79jqsumv0q8g8cy0
      responses:
        '200':
          description: Returns information about a transaction specified by a transaction hash
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wallet'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/wallets/{stake_address}/addresses':
    get:
      summary: Get wallet addresses
      tags:
        - Wallets
      operationId: get-account-id-wallets-stake_address-addresses
      parameters:
        - schema:
            type: string
          name: stake_address
          in: path
          required: true
      description: Get list of addresses for a Wallet
      responses:
        '200':
          description: Obtain information about the addresses of a wallet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wallet_addresses'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/block/{hash}':
    get:
      tags:
        - Blocks
      summary: Get block
      description: Returns information about a block by hash.
      operationId: get-block
      parameters:
        - in: path
          name: hash
          required: true
          schema:
            type: string
            format: 64-character case-sensitive hexadecimal string.
          description: Block hash.
          example: 1b1d604a7fa80f788e0ed6d39ec371d671bac417d781f1efcaa031e0e8b5f3b7
      responses:
        '200':
          description: A block object with the following fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/block'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  /blocks/latest:
    get:
      tags:
        - Blocks
      summary: Latest block
      description: Return the latest block available. This is known as the tip of the blockchain.
      operationId: get-latest-block
      responses:
        '200':
          description: Returns information about the latest block.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/block'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/assets/{asset}':
    get:
      tags:
        - Assets
      summary: Get asset
      description: Retunrs information about an asset
      operationId: get-asset
      parameters:
        - in: path
          name: asset
          required: true
          schema:
            type: string
          description: Concatenation of the policy_id and hex-encoded asset_name
          example: b3fd2e8b5764818d9b33e2bc8d9e84a61fa39e75cf0c41393ee6c7a9456e6456696f6c656e6365506c61737469633437393761
      responses:
        '200':
          description: Return the information about an asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/epochs/{number}/parameters':
    get:
      tags:
        - Epochs
      summary: Protocol parameters
      operationId: get-epoch-parameters
      description: Return the protocol parameters for a given epoch.
      parameters:
        - in: path
          name: number
          required: true
          schema:
            type: integer
          description: Number of the epoch
          example: 153
      responses:
        '200':
          description: Return the data about the epoch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/epoch_parameters'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/pools/{pool_id}/metadata':
    get:
      tags:
        - Pools
      summary: Stake pool metadata
      description: |
        Stake pool registration metadata.
      operationId: stake-pool-metadata
      parameters:
        - in: path
          name: pool_id
          required: true
          schema:
            type: string
          description: Bech32 or hexadecimal pool ID.
          example: pool1cr8vpy3ta3smcxjq8hfu8n2chxhtc78ukfruqjhfgarf5azypen
      responses:
        '200':
          description: Return the pool metadata content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pool_metadata'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  /nft/collections:
    get:
      tags:
        - NFTs > Collections
      summary: List NFT collections
      description: List the NFT collections created in your Tangocrypto account.
      operationId: list-nft-collections
      responses:
        '200':
          description: Returns NFT collections in your Tangocrypto account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nft_collections_list'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
    post:
      tags:
        - NFTs > Collections
      summary: Create NFT collection
      description: Create a new NFT collection in your Tangocrypto account.
      operationId: nft-collection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nft_collection_request'
      responses:
        '201':
          description: NFT collection created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nft_collection_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/nft/collections/{collection_id}':
    get:
      tags:
        - NFTs > Collections
      summary: Retrieve an NFT collection
      description: Get details for a single NFT collection in your Tangocrypto account.
      operationId: retrieve-nft-collection
      parameters:
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: The ID of the NFT Collection to retrieve.
          example: 61844bfbb75c4782085f01fd
      responses:
        '200':
          description: Returns an NFT collection in your Tangocrypto account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nft_collection'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
    delete:
      tags:
        - NFTs > Collections
      summary: Delete NFT collection
      description: Delete an NFT Collection in your Tangocrypto account.
      operationId: delete-nft-collection
      parameters:
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: Collection ID.
          example: 61844bfbb75c4782085f01fd
      responses:
        '200':
          description: Collection deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nft_collection_delete'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/nft/colllections/{collection_id}/tokens':
    post:
      tags:
        - NFTs > Tokens
      summary: Create NFT
      description: |
        Create NFT in a Collection
      operationId: nft-create-token
      parameters:
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: Collection ID.
          example: 61844bfbb75c4782085f01fd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nft_token_request'
      responses:
        '201':
          description: NFT created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nft_token_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/nft/tokens/{token_id}':
    get:
      tags:
        - NFTs > Tokens
      summary: Get a token
      description: Get token by id
      operationId: get-token
      parameters:
        - in: path
          name: token_id
          required: true
          schema:
            type: string
          description: Token id within your Tangocrypto account.
          example: 618afe8084a47474fb1a5b81
      responses:
        '200':
          description: 'Return token '
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    result:
                      id: 618afe8084a47474fb1a5b81
                      name: Cuco02
                      image: iVBORw0KGgoAAAANSUhEUgAAAKoAAACmCAYAAABKtBT5AAAKIWlDQ1BJQ0MgUHJvZmlsZQAASImVlgdUE9kax+/MpBdaQihSQg1FunSBQKgC0quNkIRQA4QiIjZkcQVWFBURUARZqoKrS5FFRUSxsAgqdl2QRU
                      files: []
                      description: The second best cuco 02
                      metadata_override:
                        - tag: <description>
                          name: Description
                          value: Cuco02 description
                          _id: 618afe8084a47474fb1a5b82
                        - tag: <mime_type>
                          name: Mime type
                          value: image/png
                          _id: 618afe8084a47474fb1a5b83
                        - tag: <label>
                          name: Label
                          value: '721'
                          _id: 618afe8084a47474fb1a5b84
                        - tag: <asset_name>
                          name: Asset name
                          value: Cuco02
                          _id: 618afe8084a47474fb1a5b85
                      policy:
                        lock: true
                        lock_time: '2022-01-03T15:35:10.000Z'
                        policy_id: 517137e253233defa44f7176962f4d2c8bfaa40a9d7d10700e3e392b
                        script:
                          type: all
                          scripts:
                            - type: sig
                              keyHash: d474c5c5c9ddb1663d538f5293c1a64444d560e61f5ed2538f4e32fa
                            - type: before
                              slot: 46854893
                      collection_id: 61844bfbb75c4782085f01fd
                    statusCode: 200
                properties:
                  result:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Token id in your Tangocrypto account.
                      name:
                        type: string
                        description: Token (NFT) name
                      image:
                        type: string
                        description: base64 encoded image
                      files:
                        type: array
                        items:
                          type: object
                      description:
                        type: string
                      metadata_override:
                        type: array
                        uniqueItems: false
                        items:
                          type: object
                          additionalProperties: false
                          properties:
                            tag:
                              type: string
                            name:
                              type: string
                            value:
                              type: string
                            _id:
                              type: string
                      policy:
                        type: object
                        properties:
                          lock:
                            type: boolean
                          lock_time:
                            type: string
                          policy_id:
                            type: string
                          script:
                            type: object
                            properties:
                              type:
                                type: string
                              scripts:
                                type: array
                                uniqueItems: true
                                items:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                    keyHash:
                                      type: string
                                  required:
                                    - type
                                    - keyHash
                      collection_id:
                        type: string
                        description: 'Collection ID in your Tangocrypto account. '
                  statusCode:
                    type: number
              examples:
                example:
                  value:
                    result:
                      id: 619287676dba3caa815e6f15
                      name: Beaz03
                      image: iVBORw0KGgoAAAANSUhEUgAAAaIAAAFMCAYAAACJRbidAAAK.....IWlDQ1BJQ0MgUHJvZmlsZQAASImVlgdUE9kax+/MpBdaQihSQg1FunSBQKgC0quNkIRQA4QiIjZkcQVWFBURUARZqoKrS5FFRUSxsAgqd
                      files: []
                      description: A pic of Beaz
                      metadata_override:
                        - tag: <attributes_color>
                          name: Color
                          value: Blue
                          _id: 619287676dba3caa815e6f16
                        - tag: <attributes_body>
                          name: Body
                          value: Super skinny
                          _id: 619287676dba3caa815e6f17
                        - tag: <attributes_eyes>
                          name: Eyes
                          value: Brown
                          _id: 619287676dba3caa815e6f18
                        - tag: <attributes_face>
                          name: Face
                          value: Rounded
                          _id: 619287676dba3caa815e6f19
                        - tag: <attributes_project>
                          name: Project
                          value: My cat pictures
                          _id: 619287676dba3caa815e6f1a
                        - tag: <mime_type>
                          name: Mime type
                          value: image/png
                          _id: 619287676dba3caa815e6f1b
                        - tag: <label>
                          name: Label
                          value: '721'
                          _id: 619287676dba3caa815e6f1c
                        - tag: <asset_name>
                          name: Asset name
                          value: Beaz03
                          _id: 619287676dba3caa815e6f1d
                        - tag: <description>
                          name: Asset Description
                          value: A pic of Beaz
                          _id: 619287676dba3caa815e6f1e
                      policy:
                        lock: true
                        lock_time: '2022-01-03T15:35:10.000Z'
                        policy_id: ae2ee52d4b1b78c36124a3907c84618b34995fa8e4f37ef3ad922895
                        script:
                          type: all
                          scripts:
                            - type: sig
                              keyHash: 425c6243203a5d89a54f3e951e05620910ce99e07aad6c91860178dd
                            - type: before
                              slot: 46854883
                      collection_id: 61919f96e7020f542f502510
                    status_code: 200
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/nft/collections/{collection_id}/sales':
    get:
      tags:
        - NFTs > Sales
      summary: Get Colection sales
      operationId: get-collection-sales
      description: Return all the sales for a given collection
      parameters:
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: Collection ID
          example: 61844bfbb75c4782085f01fd
      responses:
        '200':
          description: Returns an array of sale objects including the payment address and the state of the sale.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nft_token_sale_response'
              examples:
                example:
                  value:
                    type: fixed
                    price: 0
                    lock_time: 0
                    tokens:
                      - string
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
    post:
      tags:
        - NFTs > Sales
      summary: Create NFT sale
      operationId: create-nft-sale
      description: Create an NFT sale for a given collection. You can sell multiple tokens in a single sale.
      parameters:
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: Collection ID
          example: 61844bfbb75c4782085f01fd
      responses:
        '201':
          description: Returns the sale ID and the payment address.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  example:
                    result:
                      - id: 6191ae776dba3caa815e6e2c
                        address: addr_test1qqcju2acmrhrp48qwxwjhxes6gd3ay0976nfp3kmr45sxgzy7le3awh38axpkgmuuuj6qtdgq6fl3js5uaj7t6qj3n4smg8ttp
                    status_code: 201
                properties:
                  result:
                    type: array
                    uniqueItems: false
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Sale ID
                        address:
                          type: string
                          description: Payment address
                  status_code:
                    type: number
              examples:
                example:
                  value:
                    result:
                      - id: 6191ae776dba3caa815e6e2c
                        address: addr_test1qqcju2acmrhrp48qwxwjhxes6gd3ay0976nfp3kmr45sxgzy7le3awh38axpkgmuuuj6qtdgq6fl3js5uaj7t6qj3n4smg8ttp
                    status_code: 201
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  type: fixed
                  price: 6000000
                  lock_time: 300000
                  tokens:
                    - 6191a91c6dba3caa815e6dd8
              properties:
                type:
                  type: string
                  enum:
                    - fixed
                    - random
                  description: 'Use `fixed` for selling a selected token or group of tokens. Use `random` for random sale, it will pick one random token from the collection.'
                price:
                  type: number
                  description: Individual token price in lovelaces.
                lock_time:
                  type: number
                  description: Reservation time in ms.
                tokens:
                  type: array
                  description: token-id array
                  items:
                    type: object
                    description: ''
              required:
                - type
                - price
                - lock_time
                - tokens
            examples:
              example:
                value:
                  type: fixed
                  price: 6000000
                  lock_time: 300000
                  tokens:
                    - 6191a91c6dba3caa815e6dd8
        description: ''
  '/nft/collections/{collection_id}/sales/{sale_id}':
    get:
      tags:
        - NFTs > Sales
      summary: Get token sale
      description: Returns a token sale
      operationId: get-token-sale
      parameters:
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: Collection ID
          example: 61844bfbb75c4782085f01fd
        - in: path
          name: sale_id
          required: true
          schema:
            type: string
          description: Sale ID
          example: 6191ae776dba3caa815e6e2c
      responses:
        '200':
          description: Returns a token sale including the payment address and the state of the sale.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nft_token_sale'
              examples:
                RESERVED:
                  value:
                    result:
                      sales:
                        - id: 6191ae776dba3caa815e6e2c
                          type: fixed
                          quantity: 1
                          token:
                            id: 6191a91c6dba3caa815e6dd8
                            name: Beaz01
                            image: iVBORw0KGgoAAAANSUhEUgAAAaIAAAFMCAIWlDQ1BJQ....0quNLretSHi0dyC4AAAAASUVORK5CYII=
                            files: []
                            description: A pic of Beaz
                            metadata_override:
                              - tag: <attributes_color>
                                name: Color
                                value: White
                                _id: 6191a91c6dba3caa815e6dd9
                              - tag: <attributes_body>
                                name: Body
                                value: Fat
                                _id: 6191a91c6dba3caa815e6dda
                              - tag: <attributes_eyes>
                                name: Eyes
                                value: Green
                                _id: 6191a91c6dba3caa815e6ddb
                              - tag: <attributes_face>
                                name: Face
                                value: Rounded
                                _id: 6191a91c6dba3caa815e6ddc
                              - tag: <attributes_project>
                                name: Project
                                value: My cat pictures
                                _id: 6191a91c6dba3caa815e6ddd
                              - tag: <mime_type>
                                name: Mime type
                                value: image/png
                                _id: 6191a91c6dba3caa815e6dde
                              - tag: <label>
                                name: Label
                                value: '721'
                                _id: 6191a91c6dba3caa815e6ddf
                              - tag: <asset_name>
                                name: Asset name
                                value: Beaz01
                                _id: 6191a91c6dba3caa815e6de0
                              - tag: <description>
                                name: Asset Description
                                value: A pic of Beaz
                                _id: 6191a91c6dba3caa815e6de1
                            policy: {}
                            collection_id: 61919f96e7020f542f502510
                          keep_input_tokens: true
                          policy_id: ae2ee52d4b1b78c36124a3907c84618b34995fa8e4f37ef3ad922895
                          token_name: Beaz01
                          address: addr_test1qqcju2acmrhrp48qwxwjhxes6gd3ay0976nfp3kmr45sxgzy7le3awh38axpkgmuuuj6qtdgq6fl3js5uaj7t6qj3n4smg8ttp
                          payout_address: addr_test1qpp33lzjgyzz6k86yy27kvkjepu8mfjy6g4l8rf2v8yjp4sla7h6txtvlevazp6jylz0w90y8yz0uec3cder28r47sssj9w2kd
                          price: 6000000
                          fee: 2000000
                          payments: []
                          metadata:
                            '721':
                              ae2ee52d4b1b78c36124a3907c84618b34995fa8e4f37ef3ad922895:
                                Beaz01:
                                  name: Beaz01
                                  image: 'ipfs://QmUrMuGxvDXk1yn9U3fqpkBXWfrrFSx7QNB7vnMGSc4Rdg'
                                  mediaType: image/png
                                  description: A pic of Beaz
                                  files:
                                    - name: Beaz01
                                      mediaType: image/png
                                      src: <file_link_0>
                                  color: White
                                  body: Fat
                                  eyes: Green
                                  face: Rounded
                                  project: My cat pictures
                              version: '1.0'
                          status: RESERVED
                          unlock_key: 588c08faa576a0c7b96c02aceefff9b0
                          lock_time: 300000
                          collection_id: 61919f96e7020f542f502510
                      total_sales: 1
                      limit: 20
                      total_pages: 1
                      page: 1
                      paging_counter: 1
                      has_prev_page: false
                      has_next_page: false
                      prev_page: null
                      next_page: null
                    status_code: 200
                NFT_SENT:
                  value:
                    result:
                      id: 6191ae776dba3caa815e6e2c
                      type: fixed
                      quantity: 1
                      token:
                        id: 6191a91c6dba3caa815e6dd8
                        name: Beaz01
                        image: iVBORw0KGgoAAAANSUhEUgAAAaIAAAFMCAYAAACJRbidAAAKIWlDQ1BJQ...ASUVORK5CYII=
                        files: []
                        description: A pic of Beaz
                        metadata_override:
                          - tag: <attributes_color>
                            name: Color
                            value: White
                            _id: 6191a91c6dba3caa815e6dd9
                          - tag: <attributes_body>
                            name: Body
                            value: Fat
                            _id: 6191a91c6dba3caa815e6dda
                          - tag: <attributes_eyes>
                            name: Eyes
                            value: Green
                            _id: 6191a91c6dba3caa815e6ddb
                          - tag: <attributes_face>
                            name: Face
                            value: Rounded
                            _id: 6191a91c6dba3caa815e6ddc
                          - tag: <attributes_project>
                            name: Project
                            value: My cat pictures
                            _id: 6191a91c6dba3caa815e6ddd
                          - tag: <mime_type>
                            name: Mime type
                            value: image/png
                            _id: 6191a91c6dba3caa815e6dde
                          - tag: <label>
                            name: Label
                            value: '721'
                            _id: 6191a91c6dba3caa815e6ddf
                          - tag: <asset_name>
                            name: Asset name
                            value: Beaz01
                            _id: 6191a91c6dba3caa815e6de0
                          - tag: <description>
                            name: Asset Description
                            value: A pic of Beaz
                            _id: 6191a91c6dba3caa815e6de1
                        policy: {}
                        collection_id: 61919f96e7020f542f502510
                      keep_input_tokens: true
                      policy_id: ae2ee52d4b1b78c36124a3907c84618b34995fa8e4f37ef3ad922895
                      token_name: Beaz01
                      address: addr_test1qqcju2acmrhrp48qwxwjhxes6gd3ay0976nfp3kmr45sxgzy7le3awh38axpkgmuuuj6qtdgq6fl3js5uaj7t6qj3n4smg8ttp
                      payout_address: addr_test1qpp33lzjgyzz6k86yy27kvkjepu8mfjy6g4l8rf2v8yjp4sla7h6txtvlevazp6jylz0w90y8yz0uec3cder28r47sssj9w2kd
                      price: 6000000
                      fee: 2000000
                      payments:
                        - from:
                            - address: addr_test1qqrzwaptgfxa2sfnm5gu6qzsww7rm3ftldtgrwnctfv6m3es9su8497f5u6ye8umhea0aveqw2e77zwa5qjp7gxl2gqs2dd2y3
                              hash: 7866c05f2a9cbdd9e0b8863b3b2c504f555e8ad24edb3311f51518452429e4b9
                              index: 1
                              value: 13831683
                              assets: []
                          amount: 6000000
                          locker: 588c08faa576a0c7b96c02aceefff9b0
                          warning: []
                      metadata:
                        '721':
                          ae2ee52d4b1b78c36124a3907c84618b34995fa8e4f37ef3ad922895:
                            Beaz01:
                              name: Beaz01
                              image: 'ipfs://QmUrMuGxvDXk1yn9U3fqpkBXWfrrFSx7QNB7vnMGSc4Rdg'
                              mediaType: image/png
                              description: A pic of Beaz
                              files:
                                - name: Beaz01
                                  mediaType: image/png
                                  src: <file_link_0>
                              color: White
                              body: Fat
                              eyes: Green
                              face: Rounded
                              project: My cat pictures
                          version: '1.0'
                      status: NFT_SENT
                      unlock_key: 588c08faa576a0c7b96c02aceefff9b0
                      lock_time: 300000
                      tx_id: a9a444bbc911ce37234d2fffb198a36018931c62cfff387dbadbeaa930185b68
                      collection_id: 61919f96e7020f542f502510
                    status_code: 200
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
  '/nft/collections/{collection_id}/tokens':
    get:
      tags:
        - NFTs > Tokens
      summary: Get tokens
      description: Returns the tokens for a given collection
      operationId: get-collection-tokens
      parameters:
        - in: path
          name: collection_id
          required: true
          schema:
            type: string
          description: Collection ID
          example: 61844bfbb75c4782085f01fd
      responses:
        '200':
          description: Collection tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nft_collection_token'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized_error'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/overusage_limit'
        '500':
          $ref: '#/components/responses/internal_server_error'
components:
  responses:
    bad_request:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 400
              error:
                type: string
                example: Bad Request
              message:
                type: string
                example: Your request is invalid. Double-check your endpoint URL and body
            required:
              - status_code
              - error
              - message
    unauthorized_error:
      description: You must authenticate your request with an API key. Check out how to create a key if you do not have one.
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 401
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: You must authenticate your request with an API key. Check out how to create a key if you do not have one.
            required:
              - status_code
              - error
              - message
    forbidden:
      description: 'You have ve hit your capacity limit, or your request was rejected by your app''s whitelist settings.'
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 403
              error:
                type: string
                example: Forbidden
              message:
                type: string
                example: You have ve hit your capacity limit.
            required:
              - status_code
              - error
              - message
    not_found:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 404
              error:
                type: string
                example: Not Found
              message:
                type: string
                example: Not Found
            required:
              - status_code
              - error
              - message
    overusage_limit:
      description: Too Many Requests
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 429
              error:
                type: string
                example: Too Many Requests
              message:
                type: string
                example: You've exceeded your concurrent requests capacity or per second capacity. Check out the Rate Limits page for solutions.
            required:
              - status_code
              - error
              - message
    internal_server_error:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 505
              error:
                type: string
                example: Internal Server Error
              message:
                type: string
                example: An unexpected response was received from the backend. Contact us at support@tangocrypto.com
            required:
              - status_code
              - error
              - message
  schemas:
    address:
      type: object
      properties:
        address:
          type: string
          description: Bech32 encoded addresses
          example: addr_test1qquxc75xmzzy7sy955pyz4tqg0ycgttjcv2u39ay929q2yp59kkfl90wf7f9vlm99fek6e9l5zh65td8jhw63hn9skqq8thxnw
        network:
          type: string
          enum:
            - mainnet
            - testnet
          description: The network that the address belongs to.
          example: testnet
        stake_address:
          type: string
          description: Stake address that controls the key
          example: stake_test1uq6zmtyljhhylyjk0ajj5umdvjl6pta29knethdgmejctqqr6tflc
        ada:
          type: number
          description: Amount of Ada in the address (in Lovelaces)
          example: 23703680
        assets:
          type: array
          items:
            required:
              - quantity
              - policy_id
              - asset_name
            properties:
              quantity:
                type: string
                description: Amount of assset
                example: '10'
              policy_id:
                type: string
                description: Policy ID controlling an asset
                example: 79de7dbc7f59def25f1a15392e43bdf01dc225e36617e6606b543e1e
              asset_name:
                type: string
                description: Asset name
                example: Tango
      required:
        - network
        - address
        - stake_address
        - ada
        - assets
      x-examples:
        example:
          address: addr_test1qquxc75xmzzy7sy955pyz4tqg0ycgttjcv2u39ay929q2yp59kkfl90wf7f9vlm99fek6e9l5zh65td8jhw63hn9skqq8thxnw
          network: mainnet
          stake_address: stake_test1uq6zmtyljhhylyjk0ajj5umdvjl6pta29knethdgmejctqqr6tflc
          ada: 23703680
          assets:
            - quantity: '10'
              policy_id: 79de7dbc7f59def25f1a15392e43bdf01dc225e36617e6606b543e1e
              asset_name: Tango
            - quantity: '420'
              policy_id: 83635c516eef82a7f7d0bb3c824d8fb03833a7b89bc684e95221a080
              asset_name: KukoToken
            - quantity: '300'
              policy_id: db86ba38e68109ae14e21a652def261b2242ab00cba0ac7a079da130
              asset_name: MemeToken
    address_transactions:
      type: array
      items:
        type: object
        properties:
          hash:
            type: string
            description: Hash of the transaction
          block_index:
            type: integer
            description: Transaction index within the block
          block_no:
            type: integer
            description: Block number
        required:
          - hash
          - block_index
          - block_no
      example:
        - hash: 33e054b47f459a364da5cf02ad6d87dad69bd3bf167fd8708859552535155aa2
          block_index: 10
          block_no: 2893329
        - hash: eeb747a936967f87f400bae0036fa9e1f3976029c3e40e0d0d7a4cff71faee86
          block_index: 3
          block_no: 2893311
        - hash: cf0cf09621ef55d01fb006f202605de19095099b9c316fceaa4d4ab527803381
          block_index: 18
          block_no: 2893297
    address_utxo:
      type: array
      description: Addres UTXOs
      items:
        type: object
        required:
          - address
          - hash
          - index
          - value
          - assets
        properties:
          address:
            type: string
            description: Bech32 encoded addresses
            example: addr_test1qquxc75xmzzy7sy955pyz4tqg0ycgttjcv2u39ay929q2yp59kkfl90wf7f9vlm99fek6e9l5zh65td8jhw63hn9skqq8thxnw
          hash:
            type: string
            description: Transaction hash of the UTXO
          index:
            type: number
            description: UTXO index in the transaction
          value:
            type: string
            description: Amount of Ada in the address (in Lovelaces)
          assets:
            type: array
            items:
              required:
                - quantity
                - policy_id
                - asset_name
              properties:
                quantity:
                  type: string
                  description: Amount of assset
                  example: '10'
                policy_id:
                  type: string
                  description: Policy ID controlling an asset
                  example: 79de7dbc7f59def25f1a15392e43bdf01dc225e36617e6606b543e1e
                asset_name:
                  type: string
                  description: Asset name
                  example: Tango
      x-examples:
        example:
          network: testnet
          address: addr_test1qquxc75xmzzy7sy955pyz4tqg0ycgttjcv2u39ay929q2yp59kkfl90wf7f9vlm99fek6e9l5zh65td8jhw63hn9skqq8thxnw
          stake_address: stake_test1uq6zmtyljhhylyjk0ajj5umdvjl6pta29knethdgmejctqqr6tflc
          ada: 23703680
          assets:
            - quantity: '1'
              policy_id: 9956a9c21beccaf794e64bad400552d4c6645166ea9ff29adde4fc02
              asset_name: CucoNFT
            - quantity: '420'
              policy_id: 83635c516eef82a7f7d0bb3c824d8fb03833a7b89bc684e95221a080
              asset_name: Buffycoin
            - quantity: '300'
              policy_id: db86ba38e68109ae14e21a652def261b2242ab00cba0ac7a079da130
              asset_name: MomoToken
    transaction:
      description: ''
      type: object
      properties:
        hash:
          type: string
          example: d83ca035ace99cb594268bcbc4f0672509b042da49cc6b2a8368a695a40ec898
          description: Transaction hash
        block_index:
          type: number
          example: 0
          description: Transaction index within the block
        out_sum:
          type: string
          example: '8998991572374'
          description: The sum of all the UTXO per asset
        fee:
          type: string
          example: '213813'
          description: Transaction fee in Lovelaces
        deposit:
          type: string
          example: '504000000'
          description: Deposit within the transaction in Lovelaces
        size:
          type: number
          example: 988
          description: Size of the transaction in bytes
        invalid_before:
          type: string
          nullable: true
          example: null
          description: Specify a lower bound for a transaction to be valid. The transaction is valid from this slot number (including it) and thereafter.Specify a lower bound for a transaction to be valid. The transaction is valid from this slot number (including it) and thereafter.
        invalid_hereafter:
          type: string
          nullable: true
          example: '1630900'
          description: Specify an upper bound for a transaction to be valid. The transaction is valid up to this slot number (not including it).
        utxo_count:
          type: string
          description: Count of UTXOs within the transaction
        withdrawal_count:
          type: string
          example: '0'
          description: Count of the withdrawals within the transaction
        delegation_count:
          type: string
          example: '1'
          description: Count of the delegations within the transaction
        stake_cert_count:
          type: string
          example: '2'
          description: Count of the stake keys (de)registration and delegation certificates within the transaction
        pool_update:
          type: boolean
          description: True if the transaction was made to update a pool
        pool_retire:
          type: boolean
          description: True if the transaction was made to retire a pool
        asset_mint_or_burn_count:
          type: string
          description: Numnber of minted of burned tokens in the transaction
        block:
          type: object
          description: Block information
          properties:
            hash:
              type: string
              description: Block hash
              example: 0efeb64a1888fab0c2ddaa0be04fd786c87fb43e156024472bb9fd40c38a3184
            epoch_no:
              type: integer
              description: Epoch number
              example: 158
            block_no:
              type: integer
              description: Block number
              example: 2936096
            slot_no:
              type: integer
              description: Slot number
              example: 38039510
          required:
            - hash
            - epoch_no
            - block_no
            - slot_no
        assets:
          type: array
          items:
            type: object
            description: The sum of all the UTXO per asset
            properties:
              quantity:
                type: integer
                description: Asset quantity
                example: 2
              policy_id:
                type: string
                description: Policy ID of the asset
                example: 9236a326ec65243627d89f60921a42314d0cd407c002280499e1f88b
              asset_name:
                type: string
                description: Asset name
                example: PixelHead003
      required:
        - hash
        - block_index
        - out_sum
        - fee
        - deposit
        - size
        - invalid_hereafter
        - utxo_count
        - withdrawal_count
        - delegation_count
        - stake_cert_count
        - pool_update
        - pool_retire
        - asset_mint_or_burn_count
        - block
        - assets
      x-examples:
        example-1:
          hash: d83ca035ace99cb594268bcbc4f0672509b042da49cc6b2a8368a695a40ec898
          block_index: 0
          out_sum: '8998991572374'
          fee: '213813'
          deposit: '504000000'
          size: 988
          invalid_before: null
          invalid_hereafter: '1630900'
          utxo_count: '3'
          withdrawal_count: '0'
          delegation_count: '1'
          stake_cert_count: '2'
          pool_update: true
          pool_retire: false
          asset_mint_or_burn_count: '0'
          block:
            hash: e3b195f773a0790318322b5054e3e1854e6451aa355ce9f25eb4b7906afe390c
            epoch_no: 74
            block_no: 1598509
            slot_no: 1625920
          assets: []
    transaction_utxo:
      description: Get transaction UTXOs
      type: object
      properties:
        hash:
          type: string
          example: 5b730376c443e748705109cca163ed9115b0c4e6fd9459022864dfcc03dd4772
          description: Transaction hash
        inputs:
          type: array
          items:
            required:
              - address
              - hash
              - index
              - value
            properties:
              address:
                type: string
                example: addr_test1qqqfh4g5p2rayjeg5yrsgxmgvzqddps8cann3x2vr8am0yf7ljw2qfmeg3wrlqzp6zuswfr65gunuugh8mf80naz28msduy5qx
                description: Input address
              hash:
                type: string
                example: d83ca035ace99cb594268bcbc4f0672509b042da49cc6b2a8368a695a40ec898
                description: Transaction hash
              index:
                type: number
                description: UTXO Index
                example: 0
              value:
                type: string
                example: '833538009'
              assets:
                type: array
                items:
                  properties: {}
        outputs:
          type: array
          items:
            required:
              - address
              - hash
              - index
              - value
            properties:
              address:
                type: string
                example: addr_test1qrja7gghqpwwljmmxa0q0sz4c57yj4nzr57kj6nlt4xw7537ljw2qfmeg3wrlqzp6zuswfr65gunuugh8mf80naz28mse7aqsq
                description: Output address
              hash:
                type: string
                example: 5b730376c443e748705109cca163ed9115b0c4e6fd9459022864dfcc03dd4772
                description: Transaction hash
              index:
                type: number
                description: UTXO Index
                example: 1
              value:
                type: string
                example: '832336164'
              assets:
                type: array
                items:
                  properties: {}
      required:
        - hash
        - inputs
        - outputs
      x-examples:
        example:
          hash: 5b730376c443e748705109cca163ed9115b0c4e6fd9459022864dfcc03dd4772
          inputs:
            - address: addr_test1qqqfh4g5p2rayjeg5yrsgxmgvzqddps8cann3x2vr8am0yf7ljw2qfmeg3wrlqzp6zuswfr65gunuugh8mf80naz28msduy5qx
              hash: 191c0506860b366bcb44f5f63c15a92af7c1c9b35ccdd713b788c894e01ae2bc
              index: 1
              value: '833538009'
              assets: []
          outputs:
            - address: addr_test1qrja7gghqpwwljmmxa0q0sz4c57yj4nzr57kj6nlt4xw7537ljw2qfmeg3wrlqzp6zuswfr65gunuugh8mf80naz28mse7aqsq
              hash: 5b730376c443e748705109cca163ed9115b0c4e6fd9459022864dfcc03dd4772
              index: 1
              value: '832336164'
              assets: []
            - address: addr_test1qz5avrw2jqmag0a80ulzzhhxwk975gllfghtjar5cqnyqrp7ljw2qfmeg3wrlqzp6zuswfr65gunuugh8mf80naz28ms7mpl4a
              hash: 5b730376c443e748705109cca163ed9115b0c4e6fd9459022864dfcc03dd4772
              index: 0
              value: '1000000'
              assets: []
    wallet:
      description: Wallet Object
      type: object
      properties:
        active:
          type: boolean
          description: Registration state of an wallet
        active_epoch:
          type: number
          example: 74
          description: Epoch of the most recent action (registration or deregistration)
        controlled_total_stake:
          type: string
          example: '888768284'
          description: Balance of the wallet (in Lovelaces)
        rewards_sum:
          type: string
          example: '11412755'
          description: Sum of all rewards for the wallet (in Lovelaces)
        withdrawals_sum:
          type: string
          example: '3834203'
          description: Sum of all withdrawals for the wallet (in Lovelaces)
        reserves_sum:
          type: string
          example: '1600'
          description: Sum of all funds from the reserve for the wallet (in Lovelaces)
        treasury_sum:
          type: string
          example: '1234'
          description: Sum of all funds from treasury for the wallet (in Lovelaces)
        withdraw_available:
          type: string
          example: '319154618165'
          description: Sum of available rewards that haven't been withdrawn for the wallet (in Lovelaces)
        pool_id:
          type: string
          nullable: true
          example: pool1rnsw42f2q0u9fc32ttxy9l085n736jxz07lvwutz63wpyef03zh
          description: Pool ID (in Bech32) that owns the wallet
      required:
        - active
        - active_epoch
        - controlled_total_stake
        - rewards_sum
        - withdrawals_sum
        - reserves_sum
        - treasury_sum
        - withdraw_available
        - pool_id
      x-examples:
        example:
          active: true
          active_epoch: 74
          controlled_total_stake: '888768284'
          rewards_sum: '11412755'
          withdrawals_sum: '3834203'
          reserves_sum: '0'
          treasury_sum: '0'
          withdraw_available: '7578552'
          pool_id: pool1rnsw42f2q0u9fc32ttxy9l085n736jxz07lvwutz63wpyef03zh
    wallet_addresses:
      type: array
      description: ''
      items:
        type: object
        required:
          - address
        properties:
          address:
            type: string
            description: Address associated with the stake key
            example: addr_test1qz64dptgdaceda97vmdhguz88s54qzwwe5lxfyrtz3n52p37lhlvxx6nd442cph2avszquujnsz4rqh33zynzhhy5uvsz6mt86
      x-examples:
        example:
          - address: addr_test1qz64dptgdaceda97vmdhguz88s54qzwwe5lxfyrtz3n52p37lhlvxx6nd442cph2avszquujnsz4rqh33zynzhhy5uvsz6mt86
    block:
      type: object
      properties:
        id:
          type: string
          example: '2739121'
          description: Id of the block
        hash:
          type: string
          example: 1b1d604a7fa80f788e0ed6d39ec371d671bac417d781f1efcaa031e0e8b5f3b7
          description: Hash of the block
        epoch_no:
          type: integer
          example: 141
          description: Epoch number
        slot_no:
          type: integer
          example: 30600768
          description: Slot number
        epoch_slot_no:
          type: integer
          example: 58368
          description: Slot within the epoch
        block_no:
          type: integer
          example: 2713488
          description: Block number
        previous_block:
          type: integer
          example: 2713487
          description: Number of the previous block
        next_block:
          type: integer
          example: 2713489
          description: Number of the next block
        slot_leader:
          type: string
          example: Pool-d9dc497e633c2f1c
          description: Bech32 ID of the slot leader or specific block description in case there is no slot leader
        size:
          type: integer
          example: 1746
          description: Block size in Bytes
        time:
          type: string
          example: '2021-06-29T12:33:04.000Z'
          description: Block creation time in ISO 8601 format
        tx_count:
          type: integer
          example: 3
          description: Number of transactions in the block
        out_sum:
          type: string
          example: '9653657064704'
          description: Total output within the block (in Lovelaces)
        fees:
          type: string
          example: '576715'
          description: Total fees within the block (in Lovelaces)
        confirmations:
          type: integer
          example: 218306
          description: Number of block confirmations
        op_cert:
          type: string
          example: 50ae2a905d6a2b7a174f14a168d1c628c2a047a16a537209d821ac7cb041cbab
          description: Op cert of the block
        vrf_key:
          type: string
          example: vrf_vk1wf2k6lhujezqcfe00l6zetxpnmh9n6mwhpmhm0dvfh3fxgmdnrfqkms8ty
          description: VRF key of the block
      required:
        - id
        - hash
        - epoch_no
        - slot_no
        - epoch_slot_no
        - block_no
        - previous_block
        - next_block
        - slot_leader
        - size
        - time
        - tx_count
        - fees
        - confirmations
        - op_cert
        - vrf_key
    asset:
      type: object
      properties:
        policy_id:
          type: string
          example: b3fd2e8b5764818d9b33e2bc8d9e84a61fa39e75cf0c41393ee6c7a9
          description: Policy ID of the asset
        asset_name:
          type: string
          example: 456e6456696f6c656e6365506c61737469633437393761
          description: Asset name (Hex encoded)
        quantity:
          type: string
          example: '11'
          description: Asset quantity
        mint_or_burn_count:
          type: string
          example: '11'
          description: Count of mint and burn transactions
        initial_mint_tx_hash:
          type: string
          example: ec2412eacb06dc6d745c545a6bf0c5a594ea8a33d10b1b51b0789b0ccda1b581
          description: ID of the initial minting transaction
        fingerprint:
          type: string
          example: asset1uq7kmkq4re85zgxtuzweayl23lgs7tjytw24u2
          description: CIP14 based user-facing fingerprint
        metadata:
          type: object
          nullable: true
          properties:
            key:
              type: integer
              example: 721
              description: |
                There is currently no agreed standard as to how an NFT or the metadata is defined. 
                However, there is a Cardano Improvement Proposal. If you want to follow the discussion check https://github.com/cardano-foundation/CIPs/pull/85
            json:
              type: object
              description: Asset metadata
              properties:
                policy_id:
                  type: string
                  nullable: true
                  example: b3fd2e8b5764818d9b33e2bc8d9e84a61fa39e75cf0c41393ee6c7a9
                name:
                  type: string
                  nullable: true
                  example: End Violence Plastic 4797
                  description: Asset website
                image:
                  type: string
                  nullable: true
                  example: 'ipfs://QmehpwNu2uvmMX3iuePpL4mq37vvZdQzGaGHdtFKYn3S9Q'
                Series:
                  type: string
                  nullable: true
                  example: End Violence 003
                Artist:
                  type: string
                  nullable: true
                  example: Charles Gitnick x GlitchCreation
                Copyright:
                  type: string
                  nullable: true
                  example: Charles Gitnick 2021. All Rights Reserved
                Collection:
                  type: string
                  nullable: true
                  example: End Violence
    epoch_parameters:
      type: object
      properties:
        epoch_no:
          type: integer
          example: 153
          description: Epoch number
        min_fee_a:
          type: integer
          example: 44
          description: The linear factor for the minimum fee calculation for given epoch
        min_fee_b:
          type: integer
          example: 155381
          description: The constant factor for the minimum fee calculation
        max_block_size:
          type: integer
          example: 65536
          description: Maximum block body size in Bytes
        max_tx_size:
          type: integer
          example: 16384
          description: Maximum transaction size
        max_block_header_size:
          type: integer
          example: 1100
          description: Maximum block header size
        key_deposit:
          type: string
          example: '2000000'
          description: The amount of a key registration deposit in Lovelaces
        pool_deposit:
          type: string
          example: '500000000'
          description: The amount of a pool registration deposit in Lovelaces
        max_epoch:
          type: integer
          example: 18
          description: Epoch bound on pool retirement
        optimal_pool_count:
          type: integer
          example: 150
          description: Desired number of pools
        influence_a0:
          type: number
          example: 0.3
          description: Pool pledge influence
        monetary_expand_rate_rho:
          type: number
          example: 0.003
          description: Monetary expansion
        treasury_growth_rate_tau:
          type: number
          example: 0.2
          description: Treasury expansion
        decentralisation:
          type: number
          example: 0.5
          description: Percentage of blocks produced by federated nodes
        entropy:
          type: object
          nullable: true
          example: null
          description: Seed for extra entropy
        protocol_major:
          type: integer
          example: 2
          description: Accepted protocol major version
        protocol_minor:
          type: integer
          example: 0
          description: Accepted protocol minor version
        min_utxo:
          type: string
          example: '1000000'
          description: Minimum UTXO value
        min_pool_cost:
          type: string
          example: '340000000'
          description: Minimum stake cost forced on the pool
        nonce:
          type: string
          example: 1a3be38bcbb7911969283716ad7aa550250226b76a61fc51cc9a9a35d9276d81
          description: Epoch number only used once
        block_id:
          nullable: true
          type: string
          example: '2899375'
          description: Block id
      required:
        - epoch_no
        - min_fee_a
        - min_fee_b
        - max_block_size
        - max_tx_size
        - max_block_header_size
        - key_deposit
        - pool_deposit
        - max_epoch
        - optimal_pool_count
        - influence_a0
        - monetary_expand_rate_rho
        - treasury_growth_rate_tau
        - decentralisation
        - entropy
        - protocol_major
        - protocol_minor
        - min_utxo
        - min_pool_cost
        - nonce
        - block_id
    transaction_metadata:
      type: array
      description: Transaction Metadata
      uniqueItems: true
      items:
        type: object
        required:
          - label
          - json
        properties:
          label:
            type: string
            description: Metadata label
            example: '721'
          'json:':
            oneOf:
              - type: string
              - type: object
            description: Content of the metadata
      example:
        - label: '721'
          json:
            324346b91a5c58c7f236374437f584110d6a0fdcd1242dbb3abfa6b0:
              MyAsset1:
                image: 'ipfs://QmW1QwQlthYXW4juJMQktutHbWEkWp6XP8A6cQSz2csS1UC'
              MyAsset2:
                image: 'ipfs://Qmd8XPNeezP1jyGf1fc3gxK9xmADxQodm8cqv5SJ9dgz8pU'
    pool_metadata:
      type: object
      properties:
        pool_id:
          type: string
          example: pool1cr8vpy3ta3smcxjq8hfu8n2chxhtc78ukfruqjhfgarf5azypen
          description: Bech32 pool ID
        raw_id:
          type: string
          example: c0cec0922bec61bc1a403dd3c3cd58b9aebc78fcb247c04ae947469a
          description: Hexadecimal pool ID
        hash:
          type: string
          nullable: true
          example: 47c0c68cb57f4a5b4a87bad896fc274678e7aea98e200fa14a1cb40c0cab1d8c
          description: Hash of the metadata file
        url:
          type: string
          nullable: true
          example: 'https://www.tangocrypto.com/mainnet.json'
          description: URL to the stake pool metadata
      required:
        - pool_id
        - hex
        - url
        - hash
        - ticker
        - name
        - description
        - homepage
    transaction_submit:
      description: transaction submit payload
      type: object
      properties:
        tx:
          type: string
          description: Transaction CBOR in Hexadecimal format
          example: 83a600818258205b895e886b1539ffa7256e5e4dc4fd1f753389718d6a01216b64e8707fa72a02010182825839004781ac588faf62aadda0a584e41bf9776e35f83af080800d8e9505e01e64ae6f8bbd15ae8657c2ed4b5e8ef1f82e2297d7ead4c66782fb131a000f42408258390060576add07f66d5198ecc8a632b0a1c6185fc46a5e8054c897765473342dac9f95ee4f92567f652a736d64bfa0afaa2da795dda8de6585801a3a70c0fc021a0002a5f1031a59527200075820776e39ea313361b6bdc495ceeb6296ab36e5a684c57883541680ca5dc4bef03f0800a10081825820c85b2675611fbaab02089a70465d99ef1c15488d34d64ecfe2f580d846b12d21584004bbefcf1879a1c16ed194fcc609afca05b5d45fd301a75be56707a1c996fbca7e94ac7410c979fd5ddf3f1244085a35261ad6b95dbf4b10898c261133d4920ea5006568656c6c6f01542512a00e9653fe49a44a5886202e24d77eeb998f04830102a16130647472756505a2636b6579646e756c6c616c83036474727565a00669756e646566696e6564
      required:
        - tx
    nft_collection:
      description: NFT collection
      type: object
      properties:
        result:
          type: array
          uniqueItems: false
          items:
            type: object
            properties:
              id:
                type: string
                description: Colletion ID
              account_id:
                type: string
                description: Account ID
              name:
                type: string
                description: Collection name
              url:
                type: string
                description: |
                  URL of the website where the collection is going to be sold.
              description:
                type: string
                description: 'Collection description placeholder. It''s available to be minted in the metadata via the<description> placeholder. '
              payout_address:
                type: string
                description: Wallet address that is going to receive the payments of the NFT sale.
              policy:
                type: object
                properties:
                  lock:
                    type: boolean
                    description: 'Defines if the policy will be locked or not. You are not required to chose a date and time to lock the policy, if you set this parameter to false it means that the policy will be open and you can be minting NFTs under this policy forever. If you set this parameter to true then you have to specify a locktime date. '
                  lock_time:
                    type: string
                    description: 'Locktime date in Unix Epoch format. It defines for how long the NFTs in the collection can be minted. After that date the policy will be locked and nobody won''t be able to mint more NFTs using the same policy ID, not even using the same key. If you want an easy tool to convert to Unix Epoch format go to https://www.epochconverter.com/'
                  policy_id:
                    type: string
                    description: 'Policy ID of the collection. You should post the policy ID in you website, social media or any communication channel you use for buyers to verify the authenticity of the tokens they buy.'
                  script:
                    type: object
                    description: 'Policy script for the NFTs in the collection. This script indicates the type of signing that is required to issue tokens, the hash of the public verification key and a time locking.'
                    properties:
                      type:
                        type: string
                        description: ''
                      scripts:
                        type: array
                        uniqueItems: true
                        items:
                          type: object
                          additionalProperties: false
                          properties:
                            type:
                              type: string
                              description: 'Sig means it requires only one signature. '
                            keyHash:
                              type: string
                              description: Any transaction that mints tokens to be witnessed by the key with this hash.
              metadata:
                type: object
                description: 'Metadata placeholder. In the metadata section the values between < > means that they are placeholders to be evaluated when we create the NFT. You can use the metadata placeholder to define all the common metadata attributes shared by the whole collection, for example, the collection name, the copyright, the date issued, the name of the artist, etc.. Using metadata placeholders is not mandatory because you can define it in the minting operation.'
                properties:
                  label:
                    type: string
                  name:
                    type: string
                    description: used for <asset_name> on metadata standard more here. Tag <asset_name> default is token name.
                  metadata_name:
                    type: string
                  metadata_image:
                    type: string
                  metadata_media_type:
                    type: string
                  metadata_description:
                    type: string
                  version:
                    type: string
                  metadata_files:
                    type: array
                    uniqueItems: false
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        media_type:
                          type: string
                        src:
                          type: string
      example:
        result:
          id: 61844bfbb75c4782085f01fd
          account_id: f95871c3e1b0412bbe3750df46f9540e
          name: Cucote Collection
          url: 'https://ww.cucote.com'
          description: Cucote collection description
          payout_address: addr_test1qpp33lzjgyzz6k86yy27kvkjepu8mfjy6g4l8rf2v8yjp4sla7h6txtvlevazp6jylz0w90y8yz0uec3cder28r47sssj9w2kd
          policy:
            lock: true
            lock_time: '2022-01-03T15:35:10.000Z'
            policy_id: 517137e253233defa44f7176962f4d2c8bfaa40a9d7d10700e3e392b
            script:
              type: all
              scripts:
                - type: sig
                  keyHash: d474c5c5c9ddb1663d538f5293c1a64444d560e61f5ed2538f4e32fa
                - type: before
                  slot: 46854893
          metadata:
            label: <label>
            name: <asset_name>
            metadata_name: <asset_name>
            metadata_image: <image_link>
            metadata_media_type: <mime_type>
            metadata_description: <description>
            version: '1.0'
            metadata_files:
              - name: <asset_name>
                media_type: <mime_type>
                src: <file_link_0>
        status_code: 200
    nft_collections_list:
      description: ''
      type: object
      properties:
        result:
          type: object
          properties:
            collections:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: Collection id
                  account_id:
                    type: string
                    description: Tangocrypto account id
                  name:
                    type: string
                    description: Collection name. Between 2 and 32 characters (maximum 64 bytes for UTF-8 encoded).
                  url:
                    type: string
                    description: URL of the website where the collection is going to be sold.
                  description:
                    type: string
                    description: Collection description placeholder. It's available to be minted in the metadata via the<description> placeholder
                  payout_address:
                    type: string
                    description: Wallet address that is going to receive the payments of the NFT sale.
                  policy:
                    type: object
                    description: 'Policy that every token in the collection is going to have as part of their metadata. You should post the policy ID in you website, social media or any communication channel you use for buyers to verify the authenticity of the tokens they buy.'
                    properties:
                      lock:
                        type: boolean
                        description: 'Defines if the policy will be locked or not. You are not required to chose a date and time to lock the policy, if you set this parameter to false it means that the policy will be open and you can be minting NFTs under this policy forever. If you set this parameter to true then you have to specify a locktime date.'
                      lock_time:
                        type: string
                        description: 'Locktime date in Unix Epoch format. It defines for how long the NFTs in the collection can be minted. After that date the policy will be locked and nobody won''t be able to mint more NFTs using the same policy ID, not even using the same key. If you want an easy tool to convert to Unix Epoch format go to https://www.epochconverter.com/'
                      policy_id:
                        type: string
                        description: 'Policy ID. You should post the policy ID in you website, social media or any communication channel you use for buyers to verify the authenticity of the tokens they buy.'
                      script:
                        type: object
                        properties:
                          type:
                            type: string
                            description: Requires all the signatures. For the time being the API supports one signature.
                          scripts:
                            type: array
                            items:
                              type: object
                              properties:
                                type:
                                  type: string
                                  description: The type of signing that is required to issue tokens.
                                keyHash:
                                  type: string
                                  description: Hash of the public verification key.
                  metadata:
                    type: object
                    properties:
                      label:
                        type: string
                      name:
                        type: string
                      metadata_name:
                        type: string
                      metadata_image:
                        type: string
                      metadata_media_type:
                        type: string
                      metadata_description:
                        type: string
                      version:
                        type: string
                      metadata_files:
                        type: array
                        uniqueItems: false
                        items:
                          type: object
                          additionalProperties: false
                          properties:
                            name:
                              type: string
                            media_type:
                              type: string
                            src:
                              type: string
            total_collections:
              type: number
            limit:
              type: number
            total_pages:
              type: number
            page:
              type: number
            paging_counter:
              type: number
            has_prev_page:
              type: boolean
            has_next_page:
              type: boolean
            prev_page: {}
            next_page: {}
        status_code:
          type: number
      example:
        result:
          collections:
            - id: 61844bfbb75c4782085f01fd
              account_id: f95871c3e1b0412bbe3750df46f9540e
              name: Cucote Collection
              url: 'https://ww.cucote.com'
              description: Cucote collection description
              payout_address: addr_test1qpp33lzjgyzz6k86yy27kvkjepu8mfjy6g4l8rf2v8yjp4sla7h6txtvlevazp6jylz0w90y8yz0uec3cder28r47sssj9w2kd
              policy:
                lock: true
                lock_time: '2022-01-03T15:35:10.000Z'
                policy_id: 517137e253233defa44f7176962f4d2c8bfaa40a9d7d10700e3e392b
                script:
                  type: all
                  scripts:
                    - type: sig
                      keyHash: d474c5c5c9ddb1663d538f5293c1a64444d560e61f5ed2538f4e32fa
                    - type: before
                      slot: 46854893
              metadata:
                label: <label>
                name: <asset_name>
                metadata_name: <asset_name>
                metadata_image: <image_link>
                metadata_media_type: <mime_type>
                metadata_description: <description>
                version: '1.0'
                metadata_files:
                  - name: <asset_name>
                    media_type: <mime_type>
                    src: <file_link_0>
            - id: 619009843f704f62d4ad0fea
              account_id: f95871c3e1b0412bbe3750df46f9540e
              name: Cucote1 Collection
              url: 'https://ww.cucote1.com'
              description: Cucote1 collection description
              payout_address: addr_test1qpp33lzjgyzz6k86yy27kvkjepu8mfjy6g4l8rf2v8yjp4sla7h6txtvlevazp6jylz0w90y8yz0uec3cder28r47sssj9w2kd
              policy:
                lock: true
                lock_time: '2022-01-03T15:35:10.000Z'
                policy_id: 90267c7794d5ff189907c10f9a54f2d955adf3e98cefba42b59b31c5
                script:
                  type: all
                  scripts:
                    - type: sig
                      keyHash: d5f778a3a7c30bde0463f5c4ef6cf83ec777810e5a7b59aeb139d621
                    - type: before
                      slot: 46854886
              metadata:
                label: <label>
                name: <asset_name>
                metadata_name: <asset_name>
                metadata_image: <image_link>
                metadata_media_type: <mime_type>
                metadata_description: <description>
                version: '1.0'
                metadata_files:
                  - name: <asset_name>
                    media_type: <mime_type>
                    src: <file_link_0>
            - id: 619027ac3f704f62d4ad0ff1
              account_id: f95871c3e1b0412bbe3750df46f9540e
              name: momo Collection
              url: 'https://ww.cucote.com'
              description: momo collection description
              payout_address: addr_test1qpp33lzjgyzz6k86yy27kvkjepu8mfjy6g4l8rf2v8yjp4sla7h6txtvlevazp6jylz0w90y8yz0uec3cder28r47sssj9w2kd
              policy:
                lock: true
                lock_time: '2022-01-03T15:35:10.000Z'
                policy_id: 84513001b389ca01f148a9b091476830d4260162fb0fad608948bba2
                script:
                  type: all
                  scripts:
                    - type: sig
                      keyHash: f8d1f25abbd946cfa6821bc29324a0c4994b16d6d1d59fb01630c257
                    - type: before
                      slot: 46854892
              metadata:
                label: <label>
                name: <asset_name>
                metadata_name: <asset_name>
                metadata_image: <image_link>
                metadata_media_type: <mime_type>
                metadata_description: <description>
                version: '1.0'
                metadata_files:
                  - name: <asset_name>
                    media_type: <mime_type>
                    src: <file_link_0>
            - id: 619199ded2ac0803c799926d
              account_id: f95871c3e1b0412bbe3750df46f9540e
              name: Beaz Collection
              url: 'https://ww.beaz.com'
              description: Beaz collection description
              payout_address: addr_test1qpp33lzjgyzz6k86yy27kvkjepu8mfjy6g4l8rf2v8yjp4sla7h6txtvlevazp6jylz0w90y8yz0uec3cder28r47sssj9w2kd
              policy:
                lock: true
                lock_time: '2022-01-03T15:35:10.000Z'
                policy_id: 36a09e447e7f1c5807f597cb44c26812892dcd37cac2dbde31b64c62
                script:
                  type: all
                  scripts:
                    - type: sig
                      keyHash: e1c21cf5743a73e73ee21a5c3f504c0b1247d38d3c3f14b65f014690
                    - type: before
                      slot: 46854885
              metadata:
                label: <label>
                name: <asset_name>
                metadata_name: <asset_name>
                metadata_image: <image_link>
                metadata_media_type: <mime_type>
                metadata_description: <description>
                version: '1.0'
                metadata_files:
                  - name: <asset_name>
                    media_type: <mime_type>
                    src: <file_link_0>
                metadata_attributes:
                  color: <attributes_color>
                  body: <attributes_body>
                  eyes: <attributes_eyes>
                  face: <attributes_face>
                  project: <attributes_project>
            - id: 61919f96e7020f542f502510
              account_id: f95871c3e1b0412bbe3750df46f9540e
              name: Beaz Collection
              url: 'https://ww.beaz.com'
              description: Beaz collection description
              payout_address: addr_test1qpp33lzjgyzz6k86yy27kvkjepu8mfjy6g4l8rf2v8yjp4sla7h6txtvlevazp6jylz0w90y8yz0uec3cder28r47sssj9w2kd
              policy:
                lock: true
                lock_time: '2022-01-03T15:35:10.000Z'
                policy_id: ae2ee52d4b1b78c36124a3907c84618b34995fa8e4f37ef3ad922895
                script:
                  type: all
                  scripts:
                    - type: sig
                      keyHash: 425c6243203a5d89a54f3e951e05620910ce99e07aad6c91860178dd
                    - type: before
                      slot: 46854883
              metadata:
                label: <label>
                name: <asset_name>
                metadata_name: <asset_name>
                metadata_image: <image_link>
                metadata_media_type: <mime_type>
                metadata_description: <description>
                version: '1.0'
                metadata_files:
                  - name: <asset_name>
                    media_type: <mime_type>
                    src: <file_link_0>
                metadata_attributes:
                  color: <attributes_color>
                  body: <attributes_body>
                  eyes: <attributes_eyes>
                  face: <attributes_face>
                  project: <attributes_project>
            - id: 6193d0c05df3521bc5c317ac
              account_id: f95871c3e1b0412bbe3750df46f9540e
              name: Eys Collection
              url: 'https://ww.eyes.com'
              description: Eyes collection description
              payout_address: addr_test1qpp33lzjgyzz6k86yy27kvkjepu8mfjy6g4l8rf2v8yjp4sla7h6txtvlevazp6jylz0w90y8yz0uec3cder28r47sssj9w2kd
              policy:
                lock: true
                lock_time: '2022-01-03T15:35:10.000Z'
                policy_id: 4279c16161b5b4e3b8784d5c46d3fb1c7beb1f6bf5319d2cb04d9011
                script:
                  type: all
                  scripts:
                    - type: sig
                      keyHash: 5d054546ea1506180c0f5b380ea52aa9e89924dcb7ea3a90c3f0f7cd
                    - type: before
                      slot: 46854794
              metadata:
                label: <label>
                name: <asset_name>
                metadata_name: <asset_name>
                metadata_image: <image_link>
                metadata_media_type: <mime_type>
                metadata_description: <description>
                version: '1.0'
                metadata_files: []
                metadata_attributes:
                  color: <attributes_color>
                  eyes: <attributes_eyes>
                  project: <attributes_project>
          total_collections: 6
          limit: 20
          total_pages: 1
          page: 1
          paging_counter: 1
          has_prev_page: false
          has_next_page: false
          prev_page: null
          next_page: null
        status_code: 200
    nft_collection_request:
      description: Create NFT Collection request
      type: object
      properties:
        name:
          type: string
          description: Collection name. The collection name is internal to your Tangocrypto account. This is just a way to identify different collections.
        description:
          type: string
          description: Collection description. The collection description is internal to your Tangocrypto account.
        url:
          type: string
          description: URL of the website where the collection is going to be sold.
        payout_address:
          type: string
          description: Wallet address that is going to receive the payments of the NFT sale. This should be a wallet address of the seller.
        policy:
          type: object
          description: |
            Policy configuration for every NFT in the collection. When you create a new collection we do several steps in the background; we create a new key pair (*public verification key/private signing key*), a *policy script* and the *policy id*. Then during the sale process, all the tokens are minted with the same *policy script* and the *policy id* is attached permanently to the NFT. 
          required:
            - lock
          properties:
            lock:
              type: boolean
              description: |
                Defines if the policy will be locked or not. If you select `false` then you are not required to chose a date and time to lock the policy, therefore the policy will be open and you can be minting NFTs under this policy forever. If you set this parameter to `true` then you have to specify a `locktime` date.
              enum:
                - true
                - false
            lock_time:
              type: string
              description: |
                Locktime date in ISO 8601 format. It defines for how long the NFTs in the collection can be minted. After that date the policy will be locked and nobody won't be able to mint more NFTs using the same policy id, not even using the same key. Take into consideration the desirability and size of your collection before setting this date and leave enough time for selling the NFTs. There is no limit time for the future.
        metadata:
          type: object
          description: |
            Metadata placeholders for the collection. The values between `< >` mean that they are placeholders. A placeholder is simply a variable that we will assign its value when you mint the NFT. You can use the metadata placeholder to define common attributes shared by all the NFTs in the collection, like the name, copyright, date issued, artist name, social media links, etc. Using metadata placeholders is not mandatory because you can define all the attributes while creating the individual NFTs.
          required:
            - name
            - metadata_image
          properties:
            name:
              type: string
              description: Metadata placeholder for the NFT asset name.
            asset_name:
              type: string
              description: Metadata placehoder for the NFT name.
            description:
              type: string
              description: Metadata placeholder for the NFT description.
            media_type:
              type: string
              description: 'Metadata placeholder for the media type (also known as a Multipurpose Internet Mail Extensions or MIME type) indicates the nature and format of a document, file, or assortment of bytes. It is common to have NFTs with MIME-type imag, audioand video.'
            image:
              type: string
              description: Metadata placehoder for the NFT image link.
            files:
              type: array
              description: 'Array of files used for files. This is used when you want to create an NFT with different file formats. For example, you can create several audio files and add them to the metadata.'
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: Asset name of the file
                  media_type:
                    type: string
                    description: same as the previous description.
                  src:
                    type: string
            attributes:
              type: string
              description: |
                Custom attributes or traits for an NFT. You can create 2 types of attributes, fixed or variables. **Fixed**: We include these attributes in the metadata of every NFT minted in the collection with a fixed value. You can add attributes like artist name, Twitter, Discord, copyright etc. You define their value here, and then you don't have to submit them during the NFT creation step. **Variables**: Here you set a placeholder value, and we evaluate variables attributes during the NFT creation step. As you can see in the example, we defined five traits (colour, body, eyes, face, and accessories), but we don't specify the value, just a tag between `<>`.
            version:
              type: string
              description: Metadata version
              default: v1
      required:
        - name
        - payout_address
        - policy
      example:
        name: Tango Collection
        description: Tango collection description
        url: 'https://www.tangocrypto.com'
        payout_address: addr_test1qpp33lzjgyzz6k86yy27kvkjepu8mfjy6g4l8rf2v8yjp4sla7h6txtvlevazp6jylz0w90y8yz0uec3cder28r47sssj9w2kd
        policy:
          lock: true
          lock_time: 1641224110000
        metadata:
          name: <name>
          asset_name: <asset_name>
          image: <image_link>
          media_type: <mime_type>
          description: <description>
          files:
            - name: <asset_name>
              media_type: <mime_type>
              src: <file_link_1>
          attributes:
            color: <color>
            body: <body>
            eyes: <eyes>
            face: <face>
            accessory: <accessory>
            collection: Tangocrypto Collection
            artist: Tangocrypto
            twitter: 'https://twitter.com/tango_crypto'
            copyright: Tangocrypto 2021
          version: '1.0'
    nft_collection_response:
      description: ''
      type: object
      properties:
        result:
          type: object
          properties:
            id:
              type: string
              description: Collection id
            name:
              type: string
              description: Collection name. The collection name is internal to your Tangocrypto account. This is just a way to identify different collections.
            url:
              type: string
              description: URL of the website where the collection is going to be sold.
            description:
              type: string
              description: Collection description. The collection description is internal to your Tangocrypto account.
            payout_address:
              type: string
              description: Wallet address that is going to receive the payments of the NFT sale. This should be a wallet address of the seller.
            policy:
              type: object
              description: |
                Policy configuration for every NFT in the collection. When you create a new collection we do several steps in the background; we create a new key pair (*public verification key/private signing key*), a *policy script* and the *policy id*. Then during the sale process, all the tokens are minted with the same *policy script* and the *policy id* is attached permanently to the NFT. 
              properties:
                lock:
                  type: boolean
                  description: |
                    Defines if the policy will be locked or not. If you select `false` then you are not required to chose a date and time to lock the policy, therefore the policy will be open and you can be minting NFTs under this policy forever. If you set this parameter to `true` then you have to specify a `locktime` date.
                lock_time:
                  type: string
                  description: |
                    Locktime date in ISO 8601 format. It defines for how long the NFTs in the collection can be minted. After that date the policy will be locked and nobody won't be able to mint more NFTs using the same policy id, not even using the same key. Take into consideration the desirability and size of your collection before setting this date and leave enough time for selling the NFTs. There is no limit time for the future.
                policy_id:
                  type: string
                  description: |
                    Cardano NFTs need to be identified by the policy id. This id is unique and attached permanently to the asset.
                script:
                  $ref: '#/components/schemas/policy_script'
            metadata:
              type: object
              description: |
                Metadata placeholders for the collection. The values between `< >` mean that they are placeholders. A placeholder is simply a variable that we will assign its value when you mint the NFT. You can use the metadata placeholder to define common attributes shared by all the NFTs in the collection, like the name, copyright, date issued, artist name, social media links, etc. Using metadata placeholders is not mandatory because you can define all the attributes while creating the individual NFTs.
              properties:
                label:
                  type: string
                  description: Metadata label. In Cardano NFTs are identified by the `721` label.
                name:
                  type: string
                  description: Metadata placeholder for the NFT asset name.
                asset_name:
                  type: string
                  description: Metadata placehoder for the NFT name.
                description:
                  type: string
                  description: Metadata placeholder for the NFT description.
                media_type:
                  type: string
                  description: 'Metadata placeholder for the media type (also known as a Multipurpose Internet Mail Extensions or MIME type) indicates the nature and format of a document, file, or assortment of bytes. It is common to have NFTs with MIME-type imag, audioand video.'
                image:
                  type: string
                  description: Metadata placehoder for the NFT image link.
                files:
                  type: array
                  description: 'Array of files used for files. This is used when you want to create an NFT with different file formats. For example, you can create several audio files and add them to the metadata.'
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: Asset name of the file
                      media_type:
                        type: string
                        description: same as the previous description.
                      src:
                        type: string
                attributes:
                  type: string
                  description: |
                    Custom attributes or traits for an NFT. You can create 2 types of attributes, fixed or variables. **Fixed**: We include these attributes in the metadata of every NFT minted in the collection with a fixed value. You can add attributes like artist name, Twitter, Discord, copyright etc. You define their value here, and then you don't have to submit them during the NFT creation step. **Variables**: Here you set a placeholder value, and we evaluate variables attributes during the NFT creation step. As you can see in the example, we defined five traits (colour, body, eyes, face, and accessories), but we don't specify the value, just a tag between `<>`.
        created_at:
          type: number
          description: Creation datetime in ISO 8601 format.
        updated_at:
          type: number
          description: Update datetime in ISO 8601 format.
        status_code:
          type: number
      example:
        result:
          id: 409ab0cb5646435fb25c7019c9bb6bec
          name: Tangocrypto Collection
          url: 'https://www.tangocrypto.com'
          description: Tangocrypto Collection Description
          payout_address: addr_test1qp9mj7vnenx4v99hw7ztfq03n7dmmujpgtlyfjhhel9w67nk72usllcew208n60ym94xcptfrgytuy5apwp565x28jgsg0ztq3
          policy:
            lock: true
            lock_time: '2022-01-03T15:35:10.000Z'
            policy_id: db2fbd0d6c1f9a2c345e45b9360ae1593cda0aa2f62a447684d2881e
            script:
              type: all
              scripts:
                - type: sig
                  keyHash: c346072e9d687a5a13c3af8386756db788ea888f47b519837f9301eb
                - type: before
                  slot: '46854800'
          metadata:
            label: '721'
            asset_name: <asset_name>
            name: <name>
            image: <image_link>
            media_type: <mime_type>
            description: <description>
            attributes:
              face: <face>
              twitter: 'https://twitter.com/tango_crypto'
              copyright: Tangocrypto 2021
              color: <color>
              artist: Tangocrypto
              collection: Tangocrypto Collection
              body: <body>
              eyes: <eyes>
              accessory: <accessory>
            version: '1.0'
          created_at: '2021-11-29T20:40:51.021Z'
          updated_at: '2021-11-29T20:48:04.434Z'
        status_code: 200
    nft_collection_delete:
      type: object
      example:
        result: SUCCESS
        status_code: 200
      properties:
        result:
          type: string
          enum:
            - SUCCESS
            - ERROR
        status_code:
          type: number
    nft_token_request:
      description: Token request
      type: object
      properties:
        tokens:
          type: array
          uniqueItems: false
          items:
            type: object
            properties:
              name:
                type: string
                description: Token name. Between 2 and 32 characters (maximum 64 bytes for UTF-8 encoded).
              asset_name:
                type: string
                description: Take into consideration is the name is case sensitive and is between 2 and 32 characters (maximum 64 bytes for UTF-8 encoded).
              description:
                type: string
                description: Token description. Between 2 and 32 characters (maximum 64 bytes for UTF-8 encoded).
              media_type:
                type: string
                description: Media type.
              image:
                type: string
                description: 'base64 encoded image. '
              metadata_attributes:
                type: array
                uniqueItems: false
                description: 'You have to specify the values for the placeholder attributes for every token as defined in the collection attribute placeholder definition when you create the collection. Please take into consideration that we have to define these values for every single NFT in the collection. For example, we set the colour, body, eyes, face and mime type for that particular NFT.'
                items:
                  type: object
                  additionalProperties: false
                  properties:
                    tag:
                      type: string
                      description: Use the `tag` to match the placeholder defined in the collection.
                    value:
                      type: string
                      description: Use the `value` to set a value for the placeholder `tag`.
              custom_attributes:
                type: object
                description: Here you can set any arbitrary attributes that you didn't include in the collection attributes placeholder definition. Use key-value pairs to define unique attributes for each NFT.
                properties:
                  key1:
                    type: string
                  key2:
                    type: string
            required:
              - name
              - asset_name
              - image
      required:
        - tokens
      example:
        tokens:
          - name: Text with spaces 01
            asset_name: TextWithoutSpaces01
            description: This is the description
            media_type: image/png
            image: iVBORw0KGgoAAAANSU.....hEUgAADQYAAA0HCAYAAACB0xAqAAAACXBIWXMA
            metadata_attributes:
              - tag: <color>
                value: Red
              - tag: <body>
                value: Skinny
              - tag: <eyes>
                value: Blue
              - tag: <accessory>
                value: Pen
              - tag: <face>
                value: Rounded
            custom_attributes:
              location: city
              hat: baseball cap
    nft_token_response:
      description: ''
      type: object
      properties:
        result:
          type: array
          uniqueItems: false
          items:
            type: object
            additionalProperties: false
            properties:
              id:
                type: string
                description: NFT id. This id is within your Tangocrypto account.
              collection:
                type: object
                description: Collection information
                properties:
                  id:
                    type: string
                    description: Collection id
                  name:
                    type: string
                    description: Collection name
                  description:
                    type: string
                    description: Collection description
              policy:
                type: object
                properties:
                  lock_time:
                    type: string
                    description: |
                      Locktime date in ISO 8601 format. It defines for how long the NFTs in the collection can be minted. After that date the policy will be locked and nobody won't be able to mint more NFTs using the same policy id, not even using the same key. Take into consideration the desirability and size of your collection before setting this date and leave enough time for selling the NFTs. There is no limit time for the future.
                  lock:
                    type: boolean
                    description: Defines if the policy will be locked or not. If you select falsethen you are not required to choose a date and time to lock the policy, therefore the policy will be open and you can be minting NFTs under this policy forever.  If you set this parameter to true then you have to specify a locktime date. 
                  policy_id:
                    type: string
                    description: Cardano NFTs need to be identified by the policy id. This id is unique and attached permanently to the asset.
                  script:
                    $ref: '#/components/schemas/policy_script'
              metadata:
                type: object
                description: NFT Metadata. Here you can see exactly how the metadata will look like once the NFT is minted. 
              created_at:
                type: number
                description: Creation datetime in ISO 8601 format.
              updated_at:
                type: number
                description: Update datetime in ISO 8601 format.
        status_code:
          type: number
      example:
        result:
          - id: 59aacd9bab9746f9a2f9f334b2f20c70
            collection:
              id: 9c024f811654433b97f3b2719f00f604
              name: Tango collection description
              description: Collection description
            policy:
              lock_time: '1641224110000'
              lock_time_iso_8601: '2021-10-20T21:53:10Z'
              lock: true
              policy_id: ebe10abbfc5ff382bf8eb7ed44bb8f3632828659ebba917bb8c3ccb6
              script:
                type: all
                scripts:
                  - type: sig
                    keyHash: a65cef161eef7a3848f07c1a127f501b961194938478e92988813961
                  - type: before
                    slot: '46854873'
            metadata:
              '721':
                ebe10abbfc5ff382bf8eb7ed44bb8f3632828659ebba917bb8c3ccb6:
                  TheTokenName01:
                    name: The Long Token Name 01
                    image: 'ipfs://QmY9gydScXwQA4wzhFo1vqVpDkgi7sP4gH5TFmz8GYPF98'
                    mediaType: image/png
                    description: Token description 3
                    face: rounded
                    twitter: 'https://twitter.com/tango_crypto'
                    copyright: Tangocrypto 2021
                    color: Blue
                    artist: Tangocrypto
                    collection: Tangocrypto Collection
                    body: fat
                    eyes: green
                    accessory: Hat
                version: '1.0'
            created_at: '2021-10-20T21:53:10Z'
            updated_at: '2020-06-18T17:45:13Z'
        status_code: 201
    nft_token_sale_response:
      description: NFT Sale
      type: object
      x-examples:
        example:
          type: fixed
          price: 6000000
          lock_time: 300000
          tokens:
            - 6189bd6e73c4ab1a0c08eee1
            - 6182891cc814a9dbedfcc978
      properties:
        type:
          type: string
          enum:
            - fixed
            - random
          description: 'Use `fixed` for selling a particular token or list of tokens. Use `random` for a random sale, it will pick a random token from the collection.'
        price:
          type: number
          description: Individual token price in lovelaces.
        lock_time:
          type: number
          description: 'Reservation time in ms. For example, you can use this to reserve the token for 30 min, it means that for that time that token won''t be available for sale.'
        tokens:
          type: array
          uniqueItems: false
          description: Token ID array
          items:
            type: string
            description: Token ID array
      required:
        - type
        - price
        - lock_time
        - tokens
    nft_token_sale:
      description: ''
      type: object
      properties:
        result:
          type: object
          properties:
            id:
              type: string
              minLength: 1
            type:
              type: string
              minLength: 1
            quantity:
              type: number
            token:
              type: object
              properties:
                id:
                  type: string
                  minLength: 1
                name:
                  type: string
                  minLength: 1
                image:
                  type: string
                  minLength: 1
                files:
                  type: array
                  items:
                    required: []
                    properties: {}
                description:
                  type: string
                  minLength: 1
                metadata_override:
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    required:
                      - tag
                      - name
                      - value
                      - _id
                    properties:
                      tag:
                        type: string
                        minLength: 1
                      name:
                        type: string
                        minLength: 1
                      value:
                        type: string
                        minLength: 1
                      _id:
                        type: string
                        minLength: 1
                policy:
                  type: object
                  properties: {}
                  required: []
                collection_id:
                  type: string
                  minLength: 1
              required:
                - id
                - name
                - image
                - files
                - description
                - metadata_override
                - policy
                - collection_id
            keep_input_tokens:
              type: boolean
            policy_id:
              type: string
              minLength: 1
            token_name:
              type: string
              minLength: 1
            address:
              type: string
              minLength: 1
            payout_address:
              type: string
              minLength: 1
            price:
              type: number
            fee:
              type: number
            payments:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                required:
                  - amount
                  - locker
                properties:
                  from:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      required:
                        - address
                        - hash
                        - index
                        - value
                      properties:
                        address:
                          type: string
                          minLength: 1
                        hash:
                          type: string
                          minLength: 1
                        index:
                          type: number
                        value:
                          type: number
                        assets:
                          type: array
                          items:
                            required: []
                            properties: {}
                  amount:
                    type: number
                  locker:
                    type: string
                    minLength: 1
                  warning:
                    type: array
                    items:
                      required: []
                      properties: {}
            metadata:
              type: object
              properties:
                '721':
                  type: object
                  properties:
                    ae2ee52d4b1b78c36124a3907c84618b34995fa8e4f37ef3ad922895:
                      type: object
                      properties:
                        Beaz01:
                          type: object
                          properties:
                            name:
                              type: string
                              minLength: 1
                            image:
                              type: string
                              minLength: 1
                            mediaType:
                              type: string
                              minLength: 1
                            description:
                              type: string
                              minLength: 1
                            files:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                required:
                                  - name
                                  - mediaType
                                  - src
                                properties:
                                  name:
                                    type: string
                                    minLength: 1
                                  mediaType:
                                    type: string
                                    minLength: 1
                                  src:
                                    type: string
                                    minLength: 1
                            color:
                              type: string
                              minLength: 1
                            body:
                              type: string
                              minLength: 1
                            eyes:
                              type: string
                              minLength: 1
                            face:
                              type: string
                              minLength: 1
                            project:
                              type: string
                              minLength: 1
                          required:
                            - name
                            - image
                            - mediaType
                            - description
                            - files
                            - color
                            - body
                            - eyes
                            - face
                            - project
                      required:
                        - Beaz01
                    version:
                      type: string
                      minLength: 1
                  required:
                    - ae2ee52d4b1b78c36124a3907c84618b34995fa8e4f37ef3ad922895
                    - version
              required:
                - '721'
            status:
              type: string
              minLength: 1
            unlock_key:
              type: string
              minLength: 1
            lock_time:
              type: number
            tx_id:
              type: string
              minLength: 1
            collection_id:
              type: string
              minLength: 1
          required:
            - id
            - type
            - quantity
            - token
            - keep_input_tokens
            - policy_id
            - token_name
            - address
            - payout_address
            - price
            - fee
            - payments
            - metadata
            - status
            - unlock_key
            - lock_time
            - tx_id
            - collection_id
        status_code:
          type: number
      required:
        - result
        - status_code
      x-examples:
        example:
          result:
            id: 6191ae776dba3caa815e6e2c
            type: fixed
            quantity: 1
            token:
              id: 6191a91c6dba3caa815e6dd8
              name: Beaz01
              image: iVBORw0KGgoAAAANSUhEUgAA...uf04LX8DmeIIlfKwMPD6D3YaPshsthshsthst5434t4egerergergCab4
              files: []
              description: A pic of Beaz
              metadata_override:
                - tag: <attributes_color>
                  name: Color
                  value: White
                  _id: 6191a91c6dba3caa815e6dd9
                - tag: <attributes_body>
                  name: Body
                  value: Fat
                  _id: 6191a91c6dba3caa815e6dda
                - tag: <attributes_eyes>
                  name: Eyes
                  value: Green
                  _id: 6191a91c6dba3caa815e6ddb
                - tag: <attributes_face>
                  name: Face
                  value: Rounded
                  _id: 6191a91c6dba3caa815e6ddc
                - tag: <attributes_project>
                  name: Project
                  value: My cat pictures
                  _id: 6191a91c6dba3caa815e6ddd
                - tag: <mime_type>
                  name: Mime type
                  value: image/png
                  _id: 6191a91c6dba3caa815e6dde
                - tag: <label>
                  name: Label
                  value: '721'
                  _id: 6191a91c6dba3caa815e6ddf
                - tag: <asset_name>
                  name: Asset name
                  value: Beaz01
                  _id: 6191a91c6dba3caa815e6de0
                - tag: <description>
                  name: Asset Description
                  value: A pic of Beaz
                  _id: 6191a91c6dba3caa815e6de1
              policy: {}
              collection_id: 61919f96e7020f542f502510
            keep_input_tokens: true
            policy_id: ae2ee52d4b1b78c36124a3907c84618b34995fa8e4f37ef3ad922895
            token_name: Beaz01
            address: addr_test1qqcju2acmrhrp48qwxwjhxes6gd3ay0976nfp3kmr45sxgzy7le3awh38axpkgmuuuj6qtdgq6fl3js5uaj7t6qj3n4smg8ttp
            payout_address: addr_test1qpp33lzjgyzz6k86yy27kvkjepu8mfjy6g4l8rf2v8yjp4sla7h6txtvlevazp6jylz0w90y8yz0uec3cder28r47sssj9w2kd
            price: 6000000
            fee: 2000000
            payments:
              - from:
                  - address: addr_test1qqrzwaptgfxa2sfnm5gu6qzsww7rm3ftldtgrwnctfv6m3es9su8497f5u6ye8umhea0aveqw2e77zwa5qjp7gxl2gqs2dd2y3
                    hash: 7866c05f2a9cbdd9e0b8863b3b2c504f555e8ad24edb3311f51518452429e4b9
                    index: 1
                    value: 13831683
                    assets: []
                amount: 6000000
                locker: 588c08faa576a0c7b96c02aceefff9b0
                warning: []
            metadata:
              '721':
                ae2ee52d4b1b78c36124a3907c84618b34995fa8e4f37ef3ad922895:
                  Beaz01:
                    name: Beaz01
                    image: 'ipfs://QmUrMuGxvDXk1yn9U3fqpkBXWfrrFSx7QNB7vnMGSc4Rdg'
                    mediaType: image/png
                    description: A pic of Beaz
                    files:
                      - name: Beaz01
                        mediaType: image/png
                        src: <file_link_0>
                    color: White
                    body: Fat
                    eyes: Green
                    face: Rounded
                    project: My cat pictures
                version: '1.0'
            status: NFT_SENT
            unlock_key: 588c08faa576a0c7b96c02aceefff9b0
            lock_time: 300000
            tx_id: a9a444bbc911ce37234d2fffb198a36018931c62cfff387dbadbeaa930185b68
            collection_id: 61919f96e7020f542f502510
          status_code: 200
    policy_script:
      description: 'Policy script. This script indicates the type of signing that is required to issue tokens, the hash of the public verification key and a time locking.'
      type: object
      properties:
        type:
          type: string
          description: It specifies the type `all` and a list of scripts as the sub-expressions.
        scripts:
          type: array
          allOf:
            - type: object
              properties:
                type:
                  type: string
                  description: Type of signing that is required to issue tokens. For the time being we only support `sig`.
                keyHash:
                  type: string
                  description: Hash of the public verification key.
            - type: object
              properties:
                type:
                  type: string
                  description: It specifies the type `before`
                slot:
                  type: string
                  description: The signature is going to be valid before this `slot`.
      x-examples:
        example:
          type: all
          scripts:
            - type: sig
              keyHash: b64133298df11343dc37bbd7ec45dc75b8cc89dad52428e5ea4aa8c8
            - type: before
              slot: 46854808
  securitySchemes:
    x-api-key:
      name: x-api-key
      type: apiKey
      in: header
security:
  - x-api-key: []
